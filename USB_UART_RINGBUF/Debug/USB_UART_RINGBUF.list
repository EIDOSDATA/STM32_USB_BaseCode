
USB_UART_RINGBUF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000781c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a68  08007a68  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a70  08007a70  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d6c  200001e8  08007c60  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f54  08007c60  00021f54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c50  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003582  00000000  00000000  00035e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  000393e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  0003a280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233e5  00000000  00000000  0003af80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0ef  00000000  00000000  0005e365  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf497  00000000  00000000  0006d454  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c8eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  0012c968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e8 	.word	0x200001e8
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007988 	.word	0x08007988

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001ec 	.word	0x200001ec
 80001c0:	08007988 	.word	0x08007988

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b70      	ldr	r3, [pc, #448]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a6f      	ldr	r2, [pc, #444]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b6d      	ldr	r3, [pc, #436]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b69      	ldr	r3, [pc, #420]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a68      	ldr	r2, [pc, #416]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b66      	ldr	r3, [pc, #408]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b62      	ldr	r3, [pc, #392]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a61      	ldr	r2, [pc, #388]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b5f      	ldr	r3, [pc, #380]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b5b      	ldr	r3, [pc, #364]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a5a      	ldr	r2, [pc, #360]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b58      	ldr	r3, [pc, #352]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b54      	ldr	r3, [pc, #336]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a53      	ldr	r2, [pc, #332]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b51      	ldr	r3, [pc, #324]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a4c      	ldr	r2, [pc, #304]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b4a      	ldr	r3, [pc, #296]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f244 0181 	movw	r1, #16513	; 0x4081
 800059c:	4846      	ldr	r0, [pc, #280]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800059e:	f000 fea9 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4845      	ldr	r0, [pc, #276]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80005a8:	f000 fea4 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 80005c2:	f000 fcf9 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005c6:	2332      	movs	r3, #50	; 0x32
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005d6:	230b      	movs	r3, #11
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4838      	ldr	r0, [pc, #224]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 80005e2:	f000 fce9 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80005e6:	2386      	movs	r3, #134	; 0x86
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f6:	230b      	movs	r3, #11
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4831      	ldr	r0, [pc, #196]	; (80006c8 <MX_GPIO_Init+0x1f0>)
 8000602:	f000 fcd9 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000606:	f244 0381 	movw	r3, #16513	; 0x4081
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4826      	ldr	r0, [pc, #152]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000620:	f000 fcca 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000636:	230b      	movs	r3, #11
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	481d      	ldr	r0, [pc, #116]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000642:	f000 fcb9 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_GPIO_Init+0x1e4>)
 800065e:	f000 fcab 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <MX_GPIO_Init+0x1e4>)
 8000676:	f000 fc9f 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800067a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800068c:	230b      	movs	r3, #11
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_GPIO_Init+0x1e4>)
 8000698:	f000 fc8e 	bl	8000fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f000 fc32 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a6:	2028      	movs	r0, #40	; 0x28
 80006a8:	f000 fc4b 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40021800 	.word	0x40021800
 80006c0:	10110000 	.word	0x10110000
 80006c4:	40020800 	.word	0x40020800
 80006c8:	40020000 	.word	0x40020000

080006cc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <HAL_UART_RxCpltCallback+0x5c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d11e      	bne.n	800071e <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(&huart3, &tmpbuf, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	4912      	ldr	r1, [pc, #72]	; (800072c <HAL_UART_RxCpltCallback+0x60>)
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <HAL_UART_RxCpltCallback+0x5c>)
 80006e6:	f002 fcd6 	bl	8003096 <HAL_UART_Receive_IT>
		buf[bufTail] = huart->pRxBuffPtr[0];
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_UART_RxCpltCallback+0x64>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	7811      	ldrb	r1, [r2, #0]
 80006f4:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <HAL_UART_RxCpltCallback+0x68>)
 80006f6:	54d1      	strb	r1, [r2, r3]
		bufTail++;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_UART_RxCpltCallback+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <HAL_UART_RxCpltCallback+0x64>)
 8000700:	6013      	str	r3, [r2, #0]
		bufTail %= 200;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_UART_RxCpltCallback+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_UART_RxCpltCallback+0x6c>)
 8000708:	fb83 1302 	smull	r1, r3, r3, r2
 800070c:	1199      	asrs	r1, r3, #6
 800070e:	17d3      	asrs	r3, r2, #31
 8000710:	1acb      	subs	r3, r1, r3
 8000712:	21c8      	movs	r1, #200	; 0xc8
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <HAL_UART_RxCpltCallback+0x64>)
 800071c:	6013      	str	r3, [r2, #0]
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000648 	.word	0x20000648
 800072c:	20000240 	.word	0x20000240
 8000730:	20000208 	.word	0x20000208
 8000734:	20000244 	.word	0x20000244
 8000738:	51eb851f 	.word	0x51eb851f

0800073c <__io_putchar>:

int __io_putchar(int ch)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint8_t *tr = (uint8_t*) &ch;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, &tr[0], 1, -1);
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2201      	movs	r2, #1
 800074e:	68f9      	ldr	r1, [r7, #12]
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <__io_putchar+0x24>)
 8000752:	f002 fc0e 	bl	8002f72 <HAL_UART_Transmit>
	return ch;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000648 	.word	0x20000648

08000764 <__io_getchar>:
int __io_getchar()
{
 8000764:	b490      	push	{r4, r7}
 8000766:	af00      	add	r7, sp, #0
	register int ret;

	__retry: if (bufHead != bufTail)
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <__io_getchar+0x4c>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <__io_getchar+0x50>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d0f9      	beq.n	8000768 <__io_getchar+0x4>
	{
		ret = buf[bufHead];
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <__io_getchar+0x4c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <__io_getchar+0x54>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
 800077c:	461c      	mov	r4, r3
		if (ret == '\r')
 800077e:	2c0d      	cmp	r4, #13
 8000780:	d100      	bne.n	8000784 <__io_getchar+0x20>
		{
			ret = '\n';
 8000782:	240a      	movs	r4, #10
		}
		bufHead++;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <__io_getchar+0x4c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <__io_getchar+0x4c>)
 800078c:	6013      	str	r3, [r2, #0]
		bufHead %= MAX_BUFLEN;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <__io_getchar+0x4c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	425a      	negs	r2, r3
 8000794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000798:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800079c:	bf58      	it	pl
 800079e:	4253      	negpl	r3, r2
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <__io_getchar+0x4c>)
 80007a2:	6013      	str	r3, [r2, #0]
	}
	else
	{
		goto __retry;
	}
	return ret;
 80007a4:	4623      	mov	r3, r4
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc90      	pop	{r4, r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000204 	.word	0x20000204
 80007b4:	20000208 	.word	0x20000208
 80007b8:	20000244 	.word	0x20000244

080007bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007c2:	f000 fa3b 	bl	8000c3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007c6:	f000 f839 	bl	800083c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ca:	f7ff fe85 	bl	80004d8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80007ce:	f000 f991 	bl	8000af4 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80007d2:	f005 ff19 	bl	8006608 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &tmpbuf, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	4914      	ldr	r1, [pc, #80]	; (800082c <main+0x70>)
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <main+0x74>)
 80007dc:	f002 fc5b 	bl	8003096 <HAL_UART_Receive_IT>
	puts("Hello World!\r\n");
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <main+0x78>)
 80007e2:	f006 fd6d 	bl	80072c0 <puts>
		 if (rcvStat == HAL_OK)
		 {
		 HAL_UART_Transmit(&huart1, &received, 1, 1000); //읽어드린 값 터미널로 출력
		 }
		 */
		uint8_t data_rx = usb_check_buffer();
 80007e6:	f005 fe9f 	bl	8006528 <usb_check_buffer>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
		if (data_rx)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f8      	beq.n	80007e6 <main+0x2a>
		{
			uint8_t *FUCKU = usb_get_byte();
 80007f4:	f005 fec2 	bl	800657c <usb_get_byte>
 80007f8:	4603      	mov	r3, r0
 80007fa:	603b      	str	r3, [r7, #0]
			CDC_Transmit_FS(&FUCKU, strlen(&FUCKU));
 80007fc:	463b      	mov	r3, r7
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fce0 	bl	80001c4 <strlen>
 8000804:	4602      	mov	r2, r0
 8000806:	463b      	mov	r3, r7
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f005 ffd4 	bl	80067b8 <CDC_Transmit_FS>
			HAL_UART_Transmit(&huart3, &FUCKU, 1, 1000);
 8000810:	4639      	mov	r1, r7
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	2201      	movs	r2, #1
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <main+0x74>)
 800081a:	f002 fbaa 	bl	8002f72 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2101      	movs	r1, #1
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <main+0x7c>)
 8000824:	f000 fd66 	bl	80012f4 <HAL_GPIO_WritePin>
	{
 8000828:	e7dd      	b.n	80007e6 <main+0x2a>
 800082a:	bf00      	nop
 800082c:	20000240 	.word	0x20000240
 8000830:	20000648 	.word	0x20000648
 8000834:	080079a0 	.word	0x080079a0
 8000838:	40020400 	.word	0x40020400

0800083c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b092      	sub	sp, #72	; 0x48
 8000840:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f006 fc2e 	bl	80070ac <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2310      	movs	r3, #16
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 8000872:	230d      	movs	r3, #13
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 8000876:	23c3      	movs	r3, #195	; 0xc3
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800087e:	2305      	movs	r3, #5
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fec4 	bl	8002614 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x5a>
	{
		Error_Handler();
 8000892:	f000 f81a 	bl	80008ca <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2103      	movs	r1, #3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f8fe 	bl	8002ab4 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x86>
	{
		Error_Handler();
 80008be:	f000 f804 	bl	80008ca <Error_Handler>
	}
}
 80008c2:	bf00      	nop
 80008c4:	3748      	adds	r7, #72	; 0x48
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ce:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x6>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x48>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x48>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x48>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_MspInit+0x48>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_MspInit+0x48>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_MspInit+0x48>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40023800 	.word	0x40023800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 f9bb 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART3_IRQHandler+0x10>)
 8000976:	f002 fbe3 	bl	8003140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000648 	.word	0x20000648

08000984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000988:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800098c:	f000 fcca 	bl	8001324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <OTG_FS_IRQHandler+0x10>)
 800099a:	f000 fe24 	bl	80015e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20001b50 	.word	0x20001b50

080009a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ba:	f7ff fed3 	bl	8000764 <__io_getchar>
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
	}

return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e009      	b.n	8000a08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe9d 	bl	800073c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf1      	blt.n	80009f4 <_write+0x12>
	}
	return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a40:	605a      	str	r2, [r3, #4]
	return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f006 fac4 	bl	8007038 <__errno>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20020000 	.word	0x20020000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	2000020c 	.word	0x2000020c
 8000ae4:	20001f58 	.word	0x20001f58

08000ae8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART3_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART3_UART_Init+0x4c>)
 8000b2c:	f002 f9d4 	bl	8002ed8 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f7ff fec8 	bl	80008ca <Error_Handler>
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000648 	.word	0x20000648
 8000b44:	40004800 	.word	0x40004800

08000b48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_UART_MspInit+0x94>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d134      	bne.n	8000bd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_UART_MspInit+0x98>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <HAL_UART_MspInit+0x98>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0x98>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0x98>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_UART_MspInit+0x98>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_UART_MspInit+0x9c>)
 8000bc0:	f000 f9fa 	bl	8000fb8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2027      	movs	r0, #39	; 0x27
 8000bca:	f000 f99e 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bce:	2027      	movs	r0, #39	; 0x27
 8000bd0:	f000 f9b7 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40004800 	.word	0x40004800
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bee:	e003      	b.n	8000bf8 <LoopCopyDataInit>

08000bf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bf6:	3104      	adds	r1, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c00:	d3f6      	bcc.n	8000bf0 <CopyDataInit>
  ldr  r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c04:	e002      	b.n	8000c0c <LoopFillZerobss>

08000c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c08:	f842 3b04 	str.w	r3, [r2], #4

08000c0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c10:	d3f9      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c12:	f7ff ff69 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f006 fa15 	bl	8007044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fdcf 	bl	80007bc <main>
  bx  lr
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c24:	08007a78 	.word	0x08007a78
  ldr  r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c2c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000c30:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000c34:	20001f54 	.word	0x20001f54

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f945 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fe30 	bl	80008d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f95d 	bl	8000f5e <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f925 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000688 	.word	0x20000688

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000688 	.word	0x20000688

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff fff0 	bl	8000d04 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_Delay+0x40>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffe0 	bl	8000d04 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <__NVIC_EnableIRQ+0x34>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff90 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff2d 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff42 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff90 	bl	8000e4c <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5f 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff35 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d004      	beq.n	8000f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00c      	b.n	8000fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2205      	movs	r2, #5
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e16f      	b.n	80012a8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8161 	beq.w	80012a2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d00b      	beq.n	8001000 <HAL_GPIO_Init+0x48>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	2b11      	cmp	r3, #17
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 0201 	and.w	r2, r3, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0xea>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d123      	bne.n	80010ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	6939      	ldr	r1, [r7, #16]
 80010e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0203 	and.w	r2, r3, #3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 80bb 	beq.w	80012a2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	4a63      	ldr	r2, [pc, #396]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6453      	str	r3, [r2, #68]	; 0x44
 800113c:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001148:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_GPIO_Init+0x310>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a57      	ldr	r2, [pc, #348]	; (80012cc <HAL_GPIO_Init+0x314>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d031      	beq.n	80011d8 <HAL_GPIO_Init+0x220>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <HAL_GPIO_Init+0x318>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d02b      	beq.n	80011d4 <HAL_GPIO_Init+0x21c>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a55      	ldr	r2, [pc, #340]	; (80012d4 <HAL_GPIO_Init+0x31c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d025      	beq.n	80011d0 <HAL_GPIO_Init+0x218>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x320>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d01f      	beq.n	80011cc <HAL_GPIO_Init+0x214>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a53      	ldr	r2, [pc, #332]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d019      	beq.n	80011c8 <HAL_GPIO_Init+0x210>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x328>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x20c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x32c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x208>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x330>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x204>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x334>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x200>
 80011b4:	2308      	movs	r3, #8
 80011b6:	e010      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011b8:	2309      	movs	r3, #9
 80011ba:	e00e      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011bc:	2307      	movs	r3, #7
 80011be:	e00c      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011c0:	2306      	movs	r3, #6
 80011c2:	e00a      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011c4:	2305      	movs	r3, #5
 80011c6:	e008      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e004      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_GPIO_Init+0x222>
 80011d8:	2300      	movs	r3, #0
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4093      	lsls	r3, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ec:	4936      	ldr	r1, [pc, #216]	; (80012c8 <HAL_GPIO_Init+0x310>)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_GPIO_Init+0x338>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121e:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <HAL_GPIO_Init+0x338>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x338>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001248:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <HAL_GPIO_Init+0x338>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_GPIO_Init+0x338>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_GPIO_Init+0x338>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x338>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_GPIO_Init+0x338>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f47f ae88 	bne.w	8000fc8 <HAL_GPIO_Init+0x10>
  }
}
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021c00 	.word	0x40021c00
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f806 	bl	8001354 <HAL_GPIO_EXTI_Callback>
  }
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b08f      	sub	sp, #60	; 0x3c
 800136c:	af0a      	add	r7, sp, #40	; 0x28
 800136e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e10f      	b.n	800159a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f005 fb43 	bl	8006a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fb29 	bl	8003a10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	687e      	ldr	r6, [r7, #4]
 80013c6:	466d      	mov	r5, sp
 80013c8:	f106 0410 	add.w	r4, r6, #16
 80013cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013dc:	1d33      	adds	r3, r6, #4
 80013de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f002 fa0b 	bl	80037fc <USB_CoreInit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0d0      	b.n	800159a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fb16 	bl	8003a30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e04a      	b.n	80014a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	333d      	adds	r3, #61	; 0x3d
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	333c      	adds	r3, #60	; 0x3c
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	b298      	uxth	r0, r3
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3342      	adds	r3, #66	; 0x42
 8001446:	4602      	mov	r2, r0
 8001448:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	333f      	adds	r3, #63	; 0x3f
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	3344      	adds	r3, #68	; 0x44
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3348      	adds	r3, #72	; 0x48
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3350      	adds	r3, #80	; 0x50
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3301      	adds	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3af      	bcc.n	800140a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e044      	b.n	800153a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	3301      	adds	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3b5      	bcc.n	80014b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	687e      	ldr	r6, [r7, #4]
 800154c:	466d      	mov	r5, sp
 800154e:	f106 0410 	add.w	r4, r6, #16
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001562:	1d33      	adds	r3, r6, #4
 8001564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f002 fa8c 	bl	8003a84 <USB_DevInit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00d      	b.n	800159a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fac5 	bl	8004b22 <USB_DevDisconnect>

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_PCD_Start+0x16>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e012      	b.n	80015de <HAL_PCD_Start+0x3c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fa13 	bl	80039f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fa87 	bl	8004ae2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b08d      	sub	sp, #52	; 0x34
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fb3e 	bl	8004c7e <USB_GetMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 838f 	bne.w	8001d28 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f003 faa7 	bl	8004b62 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8385 	beq.w	8001d26 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fa9e 	bl	8004b62 <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b02      	cmp	r3, #2
 800162e:	d107      	bne.n	8001640 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f002 0202 	and.w	r2, r2, #2
 800163e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fa8c 	bl	8004b62 <USB_ReadInterrupts>
 800164a:	4603      	mov	r3, r0
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b10      	cmp	r3, #16
 8001652:	d161      	bne.n	8001718 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0210 	bic.w	r2, r2, #16
 8001662:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f003 020f 	and.w	r2, r3, #15
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	0c5b      	lsrs	r3, r3, #17
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	2b02      	cmp	r3, #2
 800168e:	d124      	bne.n	80016da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d035      	beq.n	8001708 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	6a38      	ldr	r0, [r7, #32]
 80016b0:	f003 f8f8 	bl	80048a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c0:	441a      	add	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	699a      	ldr	r2, [r3, #24]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d2:	441a      	add	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	e016      	b.n	8001708 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	0c5b      	lsrs	r3, r3, #17
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d110      	bne.n	8001708 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016ec:	2208      	movs	r2, #8
 80016ee:	4619      	mov	r1, r3
 80016f0:	6a38      	ldr	r0, [r7, #32]
 80016f2:	f003 f8d7 	bl	80048a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001702:	441a      	add	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0210 	orr.w	r2, r2, #16
 8001716:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fa20 	bl	8004b62 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001728:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800172c:	d16e      	bne.n	800180c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fa25 	bl	8004b86 <USB_ReadDevAllOutEpInterrupt>
 800173c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800173e:	e062      	b.n	8001806 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d057      	beq.n	80017fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fa48 	bl	8004bea <USB_ReadDevOutEPInterrupt>
 800175a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00c      	beq.n	8001780 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001772:	461a      	mov	r2, r3
 8001774:	2301      	movs	r3, #1
 8001776:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fda2 	bl	80022c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00c      	beq.n	80017a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	461a      	mov	r2, r3
 8001798:	2308      	movs	r3, #8
 800179a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800179c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fe9c 	bl	80024dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ba:	461a      	mov	r2, r3
 80017bc:	2310      	movs	r3, #16
 80017be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	015a      	lsls	r2, r3, #5
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d6:	461a      	mov	r2, r3
 80017d8:	2320      	movs	r3, #32
 80017da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f2:	461a      	mov	r2, r3
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	3301      	adds	r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d199      	bne.n	8001740 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f9a6 	bl	8004b62 <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001820:	f040 80c0 	bne.w	80019a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 f9c5 	bl	8004bb8 <USB_ReadDevAllInEpInterrupt>
 800182e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001834:	e0b2      	b.n	800199c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a7 	beq.w	8001990 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f9e9 	bl	8004c24 <USB_ReadDevInEPInterrupt>
 8001852:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d057      	beq.n	800190e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	2201      	movs	r2, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	69f9      	ldr	r1, [r7, #28]
 800187a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800187e:	4013      	ands	r3, r2
 8001880:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800188e:	461a      	mov	r2, r3
 8001890:	2301      	movs	r3, #1
 8001892:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d132      	bne.n	8001902 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	3348      	adds	r3, #72	; 0x48
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4403      	add	r3, r0
 80018bc:	3344      	adds	r3, #68	; 0x44
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4419      	add	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4403      	add	r3, r0
 80018d0:	3348      	adds	r3, #72	; 0x48
 80018d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d113      	bne.n	8001902 <HAL_PCD_IRQHandler+0x31c>
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3350      	adds	r3, #80	; 0x50
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d108      	bne.n	8001902 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018fa:	461a      	mov	r2, r3
 80018fc:	2101      	movs	r1, #1
 80018fe:	f003 f9ed 	bl	8004cdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f005 f918 	bl	8006b3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001924:	461a      	mov	r2, r3
 8001926:	2308      	movs	r3, #8
 8001928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001940:	461a      	mov	r2, r3
 8001942:	2310      	movs	r3, #16
 8001944:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800195c:	461a      	mov	r2, r3
 800195e:	2340      	movs	r3, #64	; 0x40
 8001960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001978:	461a      	mov	r2, r3
 800197a:	2302      	movs	r3, #2
 800197c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fc0c 	bl	80021a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3301      	adds	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f47f af49 	bne.w	8001836 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 f8da 	bl	8004b62 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019b8:	d114      	bne.n	80019e4 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f005 f92c 	bl	8006c2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 f8ba 	bl	8004b62 <USB_ReadInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019f8:	d112      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d102      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f005 f8e8 	bl	8006be0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a1e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f89c 	bl	8004b62 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	f040 80c7 	bne.w	8001bc6 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2110      	movs	r1, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 f97a 	bl	8003d4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5c:	e056      	b.n	8001b0c <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a82:	0151      	lsls	r1, r2, #5
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	440a      	add	r2, r1
 8001a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a90:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa2:	0151      	lsls	r1, r2, #5
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001aac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ac4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	0151      	lsls	r1, r2, #5
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	440a      	add	r2, r1
 8001afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	3301      	adds	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3a3      	bcc.n	8001a5e <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b42:	f043 030b 	orr.w	r3, r3, #11
 8001b46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b58:	f043 030b 	orr.w	r3, r3, #11
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	e015      	b.n	8001b8c <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b72:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b76:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b86:	f043 030b 	orr.w	r3, r3, #11
 8001b8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f003 f893 	bl	8004cdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 ffc9 	bl	8004b62 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bda:	d124      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f859 	bl	8004c98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 f90a 	bl	8003e04 <USB_GetDevSpeed>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681c      	ldr	r4, [r3, #0]
 8001bfc:	f001 f91e 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8001c00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f001 fe4e 	bl	80038ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 ffbc 	bl	8006b8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ff99 	bl	8004b62 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d10a      	bne.n	8001c50 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f004 ff99 	bl	8006b72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f002 0208 	and.w	r2, r2, #8
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 ff84 	bl	8004b62 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c64:	d10f      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f004 fffb 	bl	8006c6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 ff69 	bl	8004b62 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c9a:	d10f      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f004 ffce 	bl	8006c48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 ff4e 	bl	8004b62 <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f004 ffdc 	bl	8006c90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 ff38 	bl	8004b62 <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d115      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f004 ffcc 	bl	8006cac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6859      	ldr	r1, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	e000      	b.n	8001d28 <HAL_PCD_IRQHandler+0x742>
      return;
 8001d26:	bf00      	nop
    }
  }
}
 8001d28:	3734      	adds	r7, #52	; 0x34
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}

08001d2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_PCD_SetAddress+0x1a>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e013      	b.n	8001d70 <HAL_PCD_SetAddress+0x42>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 fe99 	bl	8004a98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	70fb      	strb	r3, [r7, #3]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	803b      	strh	r3, [r7, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da0f      	bge.n	8001dbe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3338      	adds	r3, #56	; 0x38
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	3304      	adds	r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	705a      	strb	r2, [r3, #1]
 8001dbc:	e00f      	b.n	8001dde <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 020f 	and.w	r2, r3, #15
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dea:	883a      	ldrh	r2, [r7, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	78ba      	ldrb	r2, [r7, #2]
 8001df4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e08:	78bb      	ldrb	r3, [r7, #2]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d102      	bne.n	8001e14 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_EP_Open+0xaa>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e00e      	b.n	8001e40 <HAL_PCD_EP_Open+0xc8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68f9      	ldr	r1, [r7, #12]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 f80b 	bl	8003e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da0f      	bge.n	8001e7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3338      	adds	r3, #56	; 0x38
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00f      	b.n	8001e9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_PCD_EP_Close+0x6e>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e00e      	b.n	8001ed4 <HAL_PCD_EP_Close+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68f9      	ldr	r1, [r7, #12]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 f847 	bl	8003f58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eec:	7afb      	ldrb	r3, [r7, #11]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6979      	ldr	r1, [r7, #20]
 8001f50:	f002 fb22 	bl	8004598 <USB_EP0StartXfer>
 8001f54:	e008      	b.n	8001f68 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	6979      	ldr	r1, [r7, #20]
 8001f64:	f002 f8d4 	bl	8004110 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f94:	681b      	ldr	r3, [r3, #0]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	460b      	mov	r3, r1
 8001fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3338      	adds	r3, #56	; 0x38
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	6979      	ldr	r1, [r7, #20]
 8002012:	f002 fac1 	bl	8004598 <USB_EP0StartXfer>
 8002016:	e008      	b.n	800202a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	f002 f873 	bl	8004110 <USB_EPStartXfer>
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e050      	b.n	80020f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da0f      	bge.n	800207a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	3338      	adds	r3, #56	; 0x38
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	705a      	strb	r2, [r3, #1]
 8002078:	e00d      	b.n	8002096 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_PCD_EP_SetStall+0x82>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e01e      	b.n	80020f4 <HAL_PCD_EP_SetStall+0xc0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fc15 	bl	80048f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	b2d9      	uxtb	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020e4:	461a      	mov	r2, r3
 80020e6:	f002 fdf9 	bl	8004cdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d901      	bls.n	800211a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e042      	b.n	80021a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800211a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da0f      	bge.n	8002142 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3338      	adds	r3, #56	; 0x38
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	705a      	strb	r2, [r3, #1]
 8002140:	e00f      	b.n	8002162 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_PCD_EP_ClrStall+0x86>
 800217e:	2302      	movs	r3, #2
 8002180:	e00e      	b.n	80021a0 <HAL_PCD_EP_ClrStall+0xa4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fc1c 	bl	80049ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	3338      	adds	r3, #56	; 0x38
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d901      	bls.n	80021e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e06c      	b.n	80022ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d902      	bls.n	80021fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	3303      	adds	r3, #3
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002204:	e02b      	b.n	800225e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	429a      	cmp	r2, r3
 800221a:	d902      	bls.n	8002222 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3303      	adds	r3, #3
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68d9      	ldr	r1, [r3, #12]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800223a:	b2db      	uxtb	r3, r3
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4603      	mov	r3, r0
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f002 fafb 	bl	800483c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	441a      	add	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	441a      	add	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	b29b      	uxth	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	429a      	cmp	r2, r3
 8002272:	d809      	bhi.n	8002288 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800227c:	429a      	cmp	r2, r3
 800227e:	d203      	bcs.n	8002288 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1be      	bne.n	8002206 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	429a      	cmp	r2, r3
 8002292:	d811      	bhi.n	80022b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	2201      	movs	r2, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	6939      	ldr	r1, [r7, #16]
 80022b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022b4:	4013      	ands	r3, r2
 80022b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	3304      	adds	r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 80a0 	bne.w	800243c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <PCD_EP_OutXfrComplete_int+0x210>)
 800230a:	4293      	cmp	r3, r2
 800230c:	f240 80dd 	bls.w	80024ca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80d7 	beq.w	80024ca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	e0cb      	b.n	80024ca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	2320      	movs	r3, #32
 800234c:	6093      	str	r3, [r2, #8]
 800234e:	e0bc      	b.n	80024ca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 80b7 	bne.w	80024ca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d90f      	bls.n	8002384 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002380:	6093      	str	r3, [r2, #8]
 8002382:	e0a2      	b.n	80024ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002396:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	0159      	lsls	r1, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	440b      	add	r3, r1
 80023a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4403      	add	r3, r0
 80023ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4403      	add	r3, r0
 80023e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4419      	add	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4403      	add	r3, r0
 80023f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d114      	bne.n	800242e <PCD_EP_OutXfrComplete_int+0x16a>
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002426:	461a      	mov	r2, r3
 8002428:	2101      	movs	r1, #1
 800242a:	f002 fc57 	bl	8004cdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f004 fb67 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
 800243a:	e046      	b.n	80024ca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d124      	bne.n	800248e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002460:	6093      	str	r3, [r2, #8]
 8002462:	e032      	b.n	80024ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	2320      	movs	r3, #32
 800247e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f004 fb3e 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
 800248c:	e01d      	b.n	80024ca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d114      	bne.n	80024be <PCD_EP_OutXfrComplete_int+0x1fa>
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d108      	bne.n	80024be <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024b6:	461a      	mov	r2, r3
 80024b8:	2100      	movs	r1, #0
 80024ba:	f002 fc0f 	bl	8004cdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f004 fb1f 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	4f54300a 	.word	0x4f54300a
 80024d8:	4f54310a 	.word	0x4f54310a

080024dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	333c      	adds	r3, #60	; 0x3c
 80024f4:	3304      	adds	r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <PCD_EP_OutSetupPacket_int+0x88>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d90e      	bls.n	8002530 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002528:	461a      	mov	r2, r3
 800252a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800252e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f004 fad7 	bl	8006ae4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <PCD_EP_OutSetupPacket_int+0x88>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d90c      	bls.n	8002558 <PCD_EP_OutSetupPacket_int+0x7c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002550:	461a      	mov	r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	f002 fbc2 	bl	8004cdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	4f54300a 	.word	0x4f54300a

08002568 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
 8002574:	4613      	mov	r3, r2
 8002576:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002586:	883b      	ldrh	r3, [r7, #0]
 8002588:	0419      	lsls	r1, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	430a      	orrs	r2, r1
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
 8002594:	e028      	b.n	80025e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e00d      	b.n	80025c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3340      	adds	r3, #64	; 0x40
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	3301      	adds	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d3ec      	bcc.n	80025aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025d0:	883b      	ldrh	r3, [r7, #0]
 80025d2:	0418      	lsls	r0, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	3b01      	subs	r3, #1
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	4302      	orrs	r2, r0
 80025e0:	3340      	adds	r3, #64	; 0x40
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	887a      	ldrh	r2, [r7, #2]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e237      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d050      	beq.n	80026d4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00c      	beq.n	8002658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	2b08      	cmp	r3, #8
 8002648:	d112      	bne.n	8002670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b9d      	ldr	r3, [pc, #628]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d036      	beq.n	80026d2 <HAL_RCC_OscConfig+0xbe>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d132      	bne.n	80026d2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e212      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4b93      	ldr	r3, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x2b0>)
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d013      	beq.n	80026aa <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fb3f 	bl	8000d04 <HAL_GetTick>
 8002686:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268a:	f7fe fb3b 	bl	8000d04 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1fc      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x76>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fb2b 	bl	8000d04 <HAL_GetTick>
 80026ae:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b2:	f7fe fb27 	bl	8000d04 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1e8      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c4:	4b7e      	ldr	r3, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x9e>
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d077      	beq.n	80027d0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e0:	4b77      	ldr	r3, [pc, #476]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ec:	4b74      	ldr	r3, [pc, #464]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d126      	bne.n	8002746 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f8:	4b71      	ldr	r3, [pc, #452]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d120      	bne.n	8002746 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	4b6e      	ldr	r3, [pc, #440]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_OscConfig+0x108>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e1bc      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	21f8      	movs	r1, #248	; 0xf8
 800272a:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	fa91 f1a1 	rbit	r1, r1
 8002732:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002734:	6979      	ldr	r1, [r7, #20]
 8002736:	fab1 f181 	clz	r1, r1
 800273a:	b2c9      	uxtb	r1, r1
 800273c:	408b      	lsls	r3, r1
 800273e:	4960      	ldr	r1, [pc, #384]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002744:	e044      	b.n	80027d0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d02a      	beq.n	80027a4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274e:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x2b4>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe fad6 	bl	8000d04 <HAL_GetTick>
 8002758:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe fad2 	bl	8000d04 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e193      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	21f8      	movs	r1, #248	; 0xf8
 8002788:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6939      	ldr	r1, [r7, #16]
 800278c:	fa91 f1a1 	rbit	r1, r1
 8002790:	60f9      	str	r1, [r7, #12]
  return result;
 8002792:	68f9      	ldr	r1, [r7, #12]
 8002794:	fab1 f181 	clz	r1, r1
 8002798:	b2c9      	uxtb	r1, r1
 800279a:	408b      	lsls	r3, r1
 800279c:	4948      	ldr	r1, [pc, #288]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
 80027a2:	e015      	b.n	80027d0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a4:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <HAL_RCC_OscConfig+0x2b4>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe faab 	bl	8000d04 <HAL_GetTick>
 80027ae:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b2:	f7fe faa7 	bl	8000d04 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e168      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c4:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d030      	beq.n	800283e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d016      	beq.n	8002812 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fa8b 	bl	8000d04 <HAL_GetTick>
 80027ee:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7fe fa87 	bl	8000d04 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e148      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1de>
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002812:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe fa74 	bl	8000d04 <HAL_GetTick>
 800281c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7fe fa70 	bl	8000d04 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e131      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8088 	beq.w	800295c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d110      	bne.n	8002880 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_RCC_OscConfig+0x2bc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x2bc>)
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x2bc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d123      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCC_OscConfig+0x2bc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_RCC_OscConfig+0x2bc>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fa2e 	bl	8000d04 <HAL_GetTick>
 80028a8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	e013      	b.n	80028d4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe fa2a 	bl	8000d04 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d90c      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0eb      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40023802 	.word	0x40023802
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
 80028d0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x48c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0e5      	beq.n	80028ac <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x490>)
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d015      	beq.n	800291e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7fe fa07 	bl	8000d04 <HAL_GetTick>
 80028f6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe fa03 	bl	8000d04 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	; 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0c2      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ee      	beq.n	80028fa <HAL_RCC_OscConfig+0x2e6>
 800291c:	e014      	b.n	8002948 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe f9f1 	bl	8000d04 <HAL_GetTick>
 8002922:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe f9ed 	bl	8000d04 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0ac      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ee      	bne.n	8002926 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8097 	beq.w	8002a94 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002966:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d061      	beq.n	8002a36 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d146      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCC_OscConfig+0x498>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe f9c0 	bl	8000d04 <HAL_GetTick>
 8002984:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe f9bc 	bl	8000d04 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e07d      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_OscConfig+0x49c>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	69d1      	ldr	r1, [r2, #28]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a12      	ldr	r2, [r2, #32]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029bc:	0192      	lsls	r2, r2, #6
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029c4:	0612      	lsls	r2, r2, #24
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029cc:	0852      	lsrs	r2, r2, #1
 80029ce:	3a01      	subs	r2, #1
 80029d0:	0412      	lsls	r2, r2, #16
 80029d2:	430a      	orrs	r2, r1
 80029d4:	4934      	ldr	r1, [pc, #208]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x498>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f990 	bl	8000d04 <HAL_GetTick>
 80029e4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f98c 	bl	8000d04 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e04d      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3d4>
 8002a06:	e045      	b.n	8002a94 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <HAL_RCC_OscConfig+0x498>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe f979 	bl	8000d04 <HAL_GetTick>
 8002a12:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe f975 	bl	8000d04 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e036      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x402>
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e029      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_OscConfig+0x494>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d115      	bne.n	8002a90 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10d      	bne.n	8002a90 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	40023870 	.word	0x40023870
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470060 	.word	0x42470060
 8002ab0:	f0bc8000 	.word	0xf0bc8000

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0d2      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d90c      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0be      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4950      	ldr	r1, [pc, #320]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e085      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e079      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e071      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4939      	ldr	r1, [pc, #228]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe f8b2 	bl	8000d04 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe f8ae 	bl	8000d04 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e059      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d20c      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e03c      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4913      	ldr	r1, [pc, #76]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002c32:	f000 f82b 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c36:	4601      	mov	r1, r0
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c40:	22f0      	movs	r2, #240	; 0xf0
 8002c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	fa92 f2a2 	rbit	r2, r2
 8002c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	fab2 f282 	clz	r2, r2
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	40d3      	lsrs	r3, r2
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x1cc>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1d0>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1d4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f80a 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	080079ec 	.word	0x080079ec
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000004 	.word	0x20000004

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d007      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x32>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d008      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x38>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80b4 	bne.w	8002e20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cba:	60bb      	str	r3, [r7, #8]
       break;
 8002cbc:	e0b3      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cc0:	60bb      	str	r3, [r7, #8]
      break;
 8002cc2:	e0b0      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ccc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cce:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d04a      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	f04f 0400 	mov.w	r4, #0
 8002ce4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	ea03 0501 	and.w	r5, r3, r1
 8002cf0:	ea04 0602 	and.w	r6, r4, r2
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	0154      	lsls	r4, r2, #5
 8002d02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d06:	014b      	lsls	r3, r1, #5
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	1b49      	subs	r1, r1, r5
 8002d0e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f04f 0400 	mov.w	r4, #0
 8002d1a:	0194      	lsls	r4, r2, #6
 8002d1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d20:	018b      	lsls	r3, r1, #6
 8002d22:	1a5b      	subs	r3, r3, r1
 8002d24:	eb64 0402 	sbc.w	r4, r4, r2
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	00e2      	lsls	r2, r4, #3
 8002d32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d36:	00d9      	lsls	r1, r3, #3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	195b      	adds	r3, r3, r5
 8002d3e:	eb44 0406 	adc.w	r4, r4, r6
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	0262      	lsls	r2, r4, #9
 8002d4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d50:	0259      	lsls	r1, r3, #9
 8002d52:	460b      	mov	r3, r1
 8002d54:	4614      	mov	r4, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	4621      	mov	r1, r4
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	f7fd fa36 	bl	80001d4 <__aeabi_uldivmod>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e049      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	ea03 0501 	and.w	r5, r3, r1
 8002d86:	ea04 0602 	and.w	r6, r4, r2
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	0154      	lsls	r4, r2, #5
 8002d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d9c:	014b      	lsls	r3, r1, #5
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4622      	mov	r2, r4
 8002da2:	1b49      	subs	r1, r1, r5
 8002da4:	eb62 0206 	sbc.w	r2, r2, r6
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	0194      	lsls	r4, r2, #6
 8002db2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002db6:	018b      	lsls	r3, r1, #6
 8002db8:	1a5b      	subs	r3, r3, r1
 8002dba:	eb64 0402 	sbc.w	r4, r4, r2
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	00e2      	lsls	r2, r4, #3
 8002dc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dcc:	00d9      	lsls	r1, r3, #3
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	195b      	adds	r3, r3, r5
 8002dd4:	eb44 0406 	adc.w	r4, r4, r6
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	02a2      	lsls	r2, r4, #10
 8002de2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002de6:	0299      	lsls	r1, r3, #10
 8002de8:	460b      	mov	r3, r1
 8002dea:	4614      	mov	r4, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	4621      	mov	r1, r4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4623      	mov	r3, r4
 8002dfa:	f7fd f9eb 	bl	80001d4 <__aeabi_uldivmod>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460c      	mov	r4, r1
 8002e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	60bb      	str	r3, [r7, #8]
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e22:	60bb      	str	r3, [r7, #8]
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	68bb      	ldr	r3, [r7, #8]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	007a1200 	.word	0x007a1200

08002e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e40:	4b02      	ldr	r3, [pc, #8]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002e56:	f7ff fff1 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002e64:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002e68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	603a      	str	r2, [r7, #0]
  return result;
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	40d3      	lsrs	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	080079fc 	.word	0x080079fc

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002e9a:	f7ff ffcf 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ea8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002eac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	603a      	str	r2, [r7, #0]
  return result;
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	40d3      	lsrs	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	080079fc 	.word	0x080079fc

08002ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e03f      	b.n	8002f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fe22 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fb83 	bl	8003628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08a      	sub	sp, #40	; 0x28
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d17c      	bne.n	800308c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_Transmit+0x2c>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e075      	b.n	800308e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x3e>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e06e      	b.n	800308e <HAL_UART_Transmit+0x11c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fc6:	f7fd fe9d 	bl	8000d04 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d108      	bne.n	8002ff4 <HAL_UART_Transmit+0x82>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e003      	b.n	8002ffc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003004:	e02a      	b.n	800305c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f9a7 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e036      	b.n	800308e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	3302      	adds	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e007      	b.n	800304e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1cf      	bne.n	8003006 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f977 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e006      	b.n	800308e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d140      	bne.n	8003132 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_UART_Receive_IT+0x26>
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e039      	b.n	8003134 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Receive_IT+0x38>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e032      	b.n	8003134 <HAL_UART_Receive_IT+0x9e>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2222      	movs	r2, #34	; 0x22
 80030f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
	...

08003140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x52>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9cc 	bl	8003528 <UART_Receive_IT>
      return;
 8003190:	e0d1      	b.n	8003336 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80b0 	beq.w	80032fa <HAL_UART_IRQHandler+0x1ba>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_UART_IRQHandler+0x70>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80a5 	beq.w	80032fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_UART_IRQHandler+0x90>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_UART_IRQHandler+0xb0>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	f043 0202 	orr.w	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_UART_IRQHandler+0xd0>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00f      	beq.n	800323a <HAL_UART_IRQHandler+0xfa>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <HAL_UART_IRQHandler+0xee>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	f043 0208 	orr.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d078      	beq.n	8003334 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_UART_IRQHandler+0x11c>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f966 	bl	8003528 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_UART_IRQHandler+0x144>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d031      	beq.n	80032e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8b7 	bl	80033f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d123      	bne.n	80032e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_UART_IRQHandler+0x1fc>)
 80032b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd fe5a 	bl	8000f76 <HAL_DMA_Abort_IT>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d016      	beq.n	80032f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d2:	4610      	mov	r0, r2
 80032d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	e00e      	b.n	80032f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f83a 	bl	8003352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032de:	e00a      	b.n	80032f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f836 	bl	8003352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	e006      	b.n	80032f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f832 	bl	8003352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032f4:	e01e      	b.n	8003334 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f6:	bf00      	nop
    return;
 80032f8:	e01c      	b.n	8003334 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_UART_IRQHandler+0x1d6>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8a3 	bl	800345a <UART_Transmit_IT>
    return;
 8003314:	e00f      	b.n	8003336 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_UART_IRQHandler+0x1f6>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8e4 	bl	80034f8 <UART_EndTransmit_IT>
    return;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003334:	bf00      	nop
  }
}
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	08003433 	.word	0x08003433

08003340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003374:	e02c      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d028      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <UART_WaitOnFlagUntilTimeout+0x30>
 8003384:	f7fd fcbe 	bl	8000d04 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	429a      	cmp	r2, r3
 8003392:	d21d      	bcs.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e00f      	b.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d0c3      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800340e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff ff80 	bl	8003352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800345a:	b480      	push	{r7}
 800345c:	b085      	sub	sp, #20
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b21      	cmp	r3, #33	; 0x21
 800346c:	d13e      	bne.n	80034ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d114      	bne.n	80034a2 <UART_Transmit_IT+0x48>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d110      	bne.n	80034a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	1c9a      	adds	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]
 80034a0:	e008      	b.n	80034b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	1c59      	adds	r1, r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6211      	str	r1, [r2, #32]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29b      	uxth	r3, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff11 	bl	8003340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b22      	cmp	r3, #34	; 0x22
 800353a:	d170      	bne.n	800361e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d117      	bne.n	8003576 <UART_Receive_IT+0x4e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d113      	bne.n	8003576 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003564:	b29a      	uxth	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
 8003574:	e026      	b.n	80035c4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	d007      	beq.n	800359a <UART_Receive_IT+0x72>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <UART_Receive_IT+0x80>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e008      	b.n	80035ba <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4619      	mov	r1, r3
 80035d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d120      	bne.n	800361a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0220 	bic.w	r2, r2, #32
 80035e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fd f85b 	bl	80006cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e002      	b.n	8003620 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003668:	f023 030c 	bic.w	r3, r3, #12
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	430b      	orrs	r3, r1
 8003674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a57      	ldr	r2, [pc, #348]	; (80037f0 <UART_SetConfig+0x1c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <UART_SetConfig+0x78>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a56      	ldr	r2, [pc, #344]	; (80037f4 <UART_SetConfig+0x1cc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7ff fbf8 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	e002      	b.n	80036ae <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036a8:	f7ff fbd2 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 80036ac:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	d14c      	bne.n	8003752 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	4a4a      	ldr	r2, [pc, #296]	; (80037f8 <UART_SetConfig+0x1d0>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	0119      	lsls	r1, r3, #4
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009a      	lsls	r2, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ee:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <UART_SetConfig+0x1d0>)
 80036f0:	fba3 0302 	umull	r0, r3, r3, r2
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	2064      	movs	r0, #100	; 0x64
 80036f8:	fb00 f303 	mul.w	r3, r0, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	3332      	adds	r3, #50	; 0x32
 8003702:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <UART_SetConfig+0x1d0>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003710:	4419      	add	r1, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009a      	lsls	r2, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fbb2 f2f3 	udiv	r2, r2, r3
 8003728:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <UART_SetConfig+0x1d0>)
 800372a:	fba3 0302 	umull	r0, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2064      	movs	r0, #100	; 0x64
 8003732:	fb00 f303 	mul.w	r3, r0, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	3332      	adds	r3, #50	; 0x32
 800373c:	4a2e      	ldr	r2, [pc, #184]	; (80037f8 <UART_SetConfig+0x1d0>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 0207 	and.w	r2, r3, #7
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	440a      	add	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003750:	e04a      	b.n	80037e8 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <UART_SetConfig+0x1d0>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	0119      	lsls	r1, r3, #4
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fbb2 f2f3 	udiv	r2, r2, r3
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <UART_SetConfig+0x1d0>)
 800378a:	fba3 0302 	umull	r0, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2064      	movs	r0, #100	; 0x64
 8003792:	fb00 f303 	mul.w	r3, r0, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	3332      	adds	r3, #50	; 0x32
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <UART_SetConfig+0x1d0>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a8:	4419      	add	r1, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <UART_SetConfig+0x1d0>)
 80037c2:	fba3 0302 	umull	r0, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2064      	movs	r0, #100	; 0x64
 80037ca:	fb00 f303 	mul.w	r3, r0, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	3332      	adds	r3, #50	; 0x32
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <UART_SetConfig+0x1d0>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	440a      	add	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40011000 	.word	0x40011000
 80037f4:	40011400 	.word	0x40011400
 80037f8:	51eb851f 	.word	0x51eb851f

080037fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037fc:	b084      	sub	sp, #16
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	f107 001c 	add.w	r0, r7, #28
 800380a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	2b01      	cmp	r3, #1
 8003812:	d122      	bne.n	800385a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800383c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f001 faa0 	bl	8004d94 <USB_CoreReset>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e010      	b.n	800387c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f001 fa94 	bl	8004d94 <USB_CoreReset>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10b      	bne.n	800389a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f043 0206 	orr.w	r2, r3, #6
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038a6:	b004      	add	sp, #16
 80038a8:	4770      	bx	lr
	...

080038ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d165      	bne.n	800398c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a41      	ldr	r2, [pc, #260]	; (80039c8 <USB_SetTurnaroundTime+0x11c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d906      	bls.n	80038d6 <USB_SetTurnaroundTime+0x2a>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a40      	ldr	r2, [pc, #256]	; (80039cc <USB_SetTurnaroundTime+0x120>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d802      	bhi.n	80038d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038d0:	230f      	movs	r3, #15
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e062      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <USB_SetTurnaroundTime+0x120>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d906      	bls.n	80038ec <USB_SetTurnaroundTime+0x40>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <USB_SetTurnaroundTime+0x124>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d802      	bhi.n	80038ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038e6:	230e      	movs	r3, #14
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e057      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a38      	ldr	r2, [pc, #224]	; (80039d0 <USB_SetTurnaroundTime+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d906      	bls.n	8003902 <USB_SetTurnaroundTime+0x56>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4a37      	ldr	r2, [pc, #220]	; (80039d4 <USB_SetTurnaroundTime+0x128>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d802      	bhi.n	8003902 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038fc:	230d      	movs	r3, #13
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e04c      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <USB_SetTurnaroundTime+0x128>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d906      	bls.n	8003918 <USB_SetTurnaroundTime+0x6c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <USB_SetTurnaroundTime+0x12c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d802      	bhi.n	8003918 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003912:	230c      	movs	r3, #12
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e041      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <USB_SetTurnaroundTime+0x12c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d906      	bls.n	800392e <USB_SetTurnaroundTime+0x82>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4a2e      	ldr	r2, [pc, #184]	; (80039dc <USB_SetTurnaroundTime+0x130>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d802      	bhi.n	800392e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003928:	230b      	movs	r3, #11
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e036      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <USB_SetTurnaroundTime+0x130>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d906      	bls.n	8003944 <USB_SetTurnaroundTime+0x98>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <USB_SetTurnaroundTime+0x134>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d802      	bhi.n	8003944 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800393e:	230a      	movs	r3, #10
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e02b      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <USB_SetTurnaroundTime+0x134>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d906      	bls.n	800395a <USB_SetTurnaroundTime+0xae>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <USB_SetTurnaroundTime+0x138>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d802      	bhi.n	800395a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003954:	2309      	movs	r3, #9
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e020      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <USB_SetTurnaroundTime+0x138>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d906      	bls.n	8003970 <USB_SetTurnaroundTime+0xc4>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <USB_SetTurnaroundTime+0x13c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d802      	bhi.n	8003970 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800396a:	2308      	movs	r3, #8
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e015      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <USB_SetTurnaroundTime+0x13c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d906      	bls.n	8003986 <USB_SetTurnaroundTime+0xda>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <USB_SetTurnaroundTime+0x140>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d802      	bhi.n	8003986 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003980:	2307      	movs	r3, #7
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e00a      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003986:	2306      	movs	r3, #6
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e007      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003992:	2309      	movs	r3, #9
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	e001      	b.n	800399c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003998:	2309      	movs	r3, #9
 800399a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	029b      	lsls	r3, r3, #10
 80039b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	00d8acbf 	.word	0x00d8acbf
 80039cc:	00e4e1bf 	.word	0x00e4e1bf
 80039d0:	00f423ff 	.word	0x00f423ff
 80039d4:	0106737f 	.word	0x0106737f
 80039d8:	011a499f 	.word	0x011a499f
 80039dc:	01312cff 	.word	0x01312cff
 80039e0:	014ca43f 	.word	0x014ca43f
 80039e4:	016e35ff 	.word	0x016e35ff
 80039e8:	01a6ab1f 	.word	0x01a6ab1f
 80039ec:	01e847ff 	.word	0x01e847ff

080039f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 0201 	bic.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d106      	bne.n	8003a5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e00b      	b.n	8003a74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e001      	b.n	8003a74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e003      	b.n	8003a7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003a74:	2032      	movs	r0, #50	; 0x32
 8003a76:	f7fd f94f 	bl	8000d18 <HAL_Delay>

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a84:	b084      	sub	sp, #16
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e009      	b.n	8003ab8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3340      	adds	r3, #64	; 0x40
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0e      	cmp	r3, #14
 8003abc:	d9f2      	bls.n	8003aa4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d11c      	bne.n	8003afe <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
 8003afc:	e00b      	b.n	8003b16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	4619      	mov	r1, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	461a      	mov	r2, r3
 8003b32:	680b      	ldr	r3, [r1, #0]
 8003b34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10c      	bne.n	8003b56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b42:	2100      	movs	r1, #0
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f945 	bl	8003dd4 <USB_SetDevSpeed>
 8003b4a:	e008      	b.n	8003b5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f940 	bl	8003dd4 <USB_SetDevSpeed>
 8003b54:	e003      	b.n	8003b5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b56:	2103      	movs	r1, #3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f93b 	bl	8003dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b5e:	2110      	movs	r1, #16
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8f3 	bl	8003d4c <USB_FlushTxFifo>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f90f 	bl	8003d94 <USB_FlushRxFifo>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	461a      	mov	r2, r3
 8003b94:	2300      	movs	r3, #0
 8003b96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e043      	b.n	8003c32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc0:	d118      	bne.n	8003bf4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e013      	b.n	8003c06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	461a      	mov	r2, r3
 8003bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e008      	b.n	8003c06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c00:	461a      	mov	r2, r3
 8003c02:	2300      	movs	r3, #0
 8003c04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	461a      	mov	r2, r3
 8003c14:	2300      	movs	r3, #0
 8003c16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c24:	461a      	mov	r2, r3
 8003c26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d3b7      	bcc.n	8003baa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e043      	b.n	8003cc8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c56:	d118      	bne.n	8003c8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e013      	b.n	8003c9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	461a      	mov	r2, r3
 8003c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e008      	b.n	8003c9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	461a      	mov	r2, r3
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2300      	movs	r3, #0
 8003cac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d3b7      	bcc.n	8003c40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <USB_DevInit+0x2c4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f043 0208 	orr.w	r2, r3, #8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d44:	b004      	add	sp, #16
 8003d46:	4770      	bx	lr
 8003d48:	803c3800 	.word	0x803c3800

08003d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <USB_FlushTxFifo+0x44>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e006      	b.n	8003d86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d0f0      	beq.n	8003d66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	00030d40 	.word	0x00030d40

08003d94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2210      	movs	r2, #16
 8003da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <USB_FlushRxFifo+0x3c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e006      	b.n	8003dc6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d0f0      	beq.n	8003da6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	00030d40 	.word	0x00030d40

08003dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0306 	and.w	r3, r3, #6
 8003e1c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
 8003e28:	e00a      	b.n	8003e40 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d002      	beq.n	8003e36 <USB_GetDevSpeed+0x32>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d102      	bne.n	8003e3c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e36:	2302      	movs	r3, #2
 8003e38:	75fb      	strb	r3, [r7, #23]
 8003e3a:	e001      	b.n	8003e40 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e3c:	230f      	movs	r3, #15
 8003e3e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d13a      	bne.n	8003ede <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d155      	bne.n	8003f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	78db      	ldrb	r3, [r3, #3]
 8003eba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ebc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	059b      	lsls	r3, r3, #22
 8003ec2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e036      	b.n	8003f4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee4:	69da      	ldr	r2, [r3, #28]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11a      	bne.n	8003f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f32:	430b      	orrs	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d161      	bne.n	8004038 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f8a:	d11f      	bne.n	8003fcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003faa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2101      	movs	r1, #1
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fec:	4013      	ands	r3, r2
 8003fee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	2101      	movs	r1, #1
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	b29b      	uxth	r3, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004010:	4013      	ands	r3, r2
 8004012:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0159      	lsls	r1, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	440b      	add	r3, r1
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	4619      	mov	r1, r3
 8004030:	4b35      	ldr	r3, [pc, #212]	; (8004108 <USB_DeactivateEndpoint+0x1b0>)
 8004032:	4013      	ands	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
 8004036:	e060      	b.n	80040fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800404a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800404e:	d11f      	bne.n	8004090 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800406e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	440a      	add	r2, r1
 8004086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800408e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	43db      	mvns	r3, r3
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b0:	4013      	ands	r3, r2
 80040b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	43db      	mvns	r3, r3
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d4:	4013      	ands	r3, r2
 80040d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	0159      	lsls	r1, r3, #5
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	440b      	add	r3, r1
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	4619      	mov	r1, r3
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <USB_DeactivateEndpoint+0x1b4>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	ec337800 	.word	0xec337800
 800410c:	eff37800 	.word	0xeff37800

08004110 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 815c 	bne.w	80043ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d132      	bne.n	80041a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	440a      	add	r2, r1
 8004150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800415c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004198:	0cdb      	lsrs	r3, r3, #19
 800419a:	04db      	lsls	r3, r3, #19
 800419c:	6113      	str	r3, [r2, #16]
 800419e:	e074      	b.n	800428a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ba:	0cdb      	lsrs	r3, r3, #19
 80041bc:	04db      	lsls	r3, r3, #19
 80041be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	0151      	lsls	r1, r2, #5
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	440a      	add	r2, r1
 80041d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	440b      	add	r3, r1
 80041fc:	1e59      	subs	r1, r3, #1
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	fbb1 f3f3 	udiv	r3, r1, r3
 8004206:	04d9      	lsls	r1, r3, #19
 8004208:	4b9d      	ldr	r3, [pc, #628]	; (8004480 <USB_EPStartXfer+0x370>)
 800420a:	400b      	ands	r3, r1
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	0148      	lsls	r0, r1, #5
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	4401      	add	r1, r0
 8004214:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004218:	4313      	orrs	r3, r2
 800421a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004232:	69b9      	ldr	r1, [r7, #24]
 8004234:	0148      	lsls	r0, r1, #5
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	4401      	add	r1, r0
 800423a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	78db      	ldrb	r3, [r3, #3]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d11f      	bne.n	800428a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004264:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004268:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004288:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d14b      	bne.n	8004328 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	78db      	ldrb	r3, [r3, #3]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d128      	bne.n	8004306 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d110      	bne.n	80042e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e00f      	b.n	8004306 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e12f      	b.n	8004588 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	440a      	add	r2, r1
 800433e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004346:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	78db      	ldrb	r3, [r3, #3]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d015      	beq.n	800437c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8117 	beq.w	8004588 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004376:	4313      	orrs	r3, r2
 8004378:	634b      	str	r3, [r1, #52]	; 0x34
 800437a:	e105      	b.n	8004588 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d110      	bne.n	80043ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e00f      	b.n	80043ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68d9      	ldr	r1, [r3, #12]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	b298      	uxth	r0, r3
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4603      	mov	r3, r0
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fa2a 	bl	800483c <USB_WritePacket>
 80043e8:	e0ce      	b.n	8004588 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004404:	0cdb      	lsrs	r3, r3, #19
 8004406:	04db      	lsls	r3, r3, #19
 8004408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800442c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d126      	bne.n	8004484 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	0148      	lsls	r0, r1, #5
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	4401      	add	r1, r0
 8004454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004458:	4313      	orrs	r3, r2
 800445a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800447a:	6113      	str	r3, [r2, #16]
 800447c:	e036      	b.n	80044ec <USB_EPStartXfer+0x3dc>
 800447e:	bf00      	nop
 8004480:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4413      	add	r3, r2
 800448e:	1e5a      	subs	r2, r3, #1
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	8afb      	ldrh	r3, [r7, #22]
 80044aa:	04d9      	lsls	r1, r3, #19
 80044ac:	4b39      	ldr	r3, [pc, #228]	; (8004594 <USB_EPStartXfer+0x484>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	0148      	lsls	r0, r1, #5
 80044b4:	69f9      	ldr	r1, [r7, #28]
 80044b6:	4401      	add	r1, r0
 80044b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044bc:	4313      	orrs	r3, r2
 80044be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	8af9      	ldrh	r1, [r7, #22]
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	0148      	lsls	r0, r1, #5
 80044e0:	69f9      	ldr	r1, [r7, #28]
 80044e2:	4401      	add	r1, r0
 80044e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044e8:	4313      	orrs	r3, r2
 80044ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10d      	bne.n	800450e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	460a      	mov	r2, r1
 800450c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	78db      	ldrb	r3, [r3, #3]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d128      	bne.n	8004568 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d110      	bne.n	8004548 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00f      	b.n	8004568 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	440a      	add	r2, r1
 800455e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	1ff80000 	.word	0x1ff80000

08004598 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 80cd 	bne.w	8004754 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d132      	bne.n	8004628 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004620:	0cdb      	lsrs	r3, r3, #19
 8004622:	04db      	lsls	r3, r3, #19
 8004624:	6113      	str	r3, [r2, #16]
 8004626:	e04e      	b.n	80046c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	0151      	lsls	r1, r2, #5
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	440a      	add	r2, r1
 800463e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004642:	0cdb      	lsrs	r3, r3, #19
 8004644:	04db      	lsls	r3, r3, #19
 8004646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004666:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800466a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d903      	bls.n	8004680 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	440a      	add	r2, r1
 8004696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800469e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	0148      	lsls	r0, r1, #5
 80046ba:	6979      	ldr	r1, [r7, #20]
 80046bc:	4401      	add	r1, r0
 80046be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046c2:	4313      	orrs	r3, r2
 80046c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d11e      	bne.n	800470a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	e092      	b.n	8004830 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	440a      	add	r2, r1
 8004720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004728:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d07e      	beq.n	8004830 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	6979      	ldr	r1, [r7, #20]
 800474a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800474e:	4313      	orrs	r3, r2
 8004750:	634b      	str	r3, [r1, #52]	; 0x34
 8004752:	e06d      	b.n	8004830 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476e:	0cdb      	lsrs	r3, r3, #19
 8004770:	04db      	lsls	r3, r3, #19
 8004772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004792:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004796:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047de:	6939      	ldr	r1, [r7, #16]
 80047e0:	0148      	lsls	r0, r1, #5
 80047e2:	6979      	ldr	r1, [r7, #20]
 80047e4:	4401      	add	r1, r0
 80047e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047ea:	4313      	orrs	r3, r2
 80047ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10d      	bne.n	8004810 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	68d9      	ldr	r1, [r3, #12]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	460a      	mov	r2, r1
 800480e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800482e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	460b      	mov	r3, r1
 800484c:	71fb      	strb	r3, [r7, #7]
 800484e:	4613      	mov	r3, r2
 8004850:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800485a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11a      	bne.n	8004898 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004862:	88bb      	ldrh	r3, [r7, #4]
 8004864:	3303      	adds	r3, #3
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e00f      	b.n	8004890 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	031a      	lsls	r2, r3, #12
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	461a      	mov	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3304      	adds	r3, #4
 8004888:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	3301      	adds	r3, #1
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d3eb      	bcc.n	8004870 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	3303      	adds	r3, #3
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e00b      	b.n	80048e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	3304      	adds	r3, #4
 80048d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3301      	adds	r3, #1
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d3ef      	bcc.n	80048c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80048e8:	69fb      	ldr	r3, [r7, #28]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d12c      	bne.n	800496a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db12      	blt.n	8004948 <USB_EPSetStall+0x54>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00f      	beq.n	8004948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e02b      	b.n	80049c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db12      	blt.n	80049a2 <USB_EPSetStall+0xae>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d128      	bne.n	8004a3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d003      	beq.n	8004a1a <USB_EPClearStall+0x4c>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d138      	bne.n	8004a8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e027      	b.n	8004a8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	78db      	ldrb	r3, [r3, #3]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d003      	beq.n	8004a6c <USB_EPClearStall+0x9e>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	78db      	ldrb	r3, [r3, #3]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d10f      	bne.n	8004a8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004aba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004afc:	f023 0303 	bic.w	r3, r3, #3
 8004b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b10:	f023 0302 	bic.w	r3, r3, #2
 8004b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b3c:	f023 0303 	bic.w	r3, r3, #3
 8004b40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b50:	f043 0302 	orr.w	r3, r3, #2
 8004b54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4013      	ands	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	0c1b      	lsrs	r3, r3, #16
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	b29b      	uxth	r3, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c18:	68bb      	ldr	r3, [r7, #8]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	01db      	lsls	r3, r3, #7
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c72:	68bb      	ldr	r3, [r7, #8]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	333c      	adds	r3, #60	; 0x3c
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <USB_EP0_OutStart+0xb4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d90a      	bls.n	8004d16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d10:	d101      	bne.n	8004d16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e037      	b.n	8004d86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d44:	f043 0318 	orr.w	r3, r3, #24
 8004d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10f      	bne.n	8004d84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	4f54300a 	.word	0x4f54300a

08004d94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <USB_CoreReset+0x60>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e01b      	b.n	8004dea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	daf2      	bge.n	8004da0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <USB_CoreReset+0x60>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d0f0      	beq.n	8004dca <USB_CoreReset+0x36>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	00030d40 	.word	0x00030d40

08004df8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7c1b      	ldrb	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d115      	bne.n	8004e3c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e14:	2202      	movs	r2, #2
 8004e16:	2181      	movs	r1, #129	; 0x81
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 ffba 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e28:	2202      	movs	r2, #2
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 ffb0 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004e3a:	e012      	b.n	8004e62 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e3c:	2340      	movs	r3, #64	; 0x40
 8004e3e:	2202      	movs	r2, #2
 8004e40:	2181      	movs	r1, #129	; 0x81
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 ffa5 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	2202      	movs	r2, #2
 8004e52:	2101      	movs	r1, #1
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 ff9c 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e62:	2308      	movs	r3, #8
 8004e64:	2203      	movs	r2, #3
 8004e66:	2182      	movs	r1, #130	; 0x82
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f001 ff92 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e78:	f002 f908 	bl	800708c <malloc>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e026      	b.n	8004ee4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7c1b      	ldrb	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eca:	2101      	movs	r1, #1
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f002 f850 	bl	8006f72 <USBD_LL_PrepareReceive>
 8004ed2:	e007      	b.n	8004ee4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	2101      	movs	r1, #1
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f002 f847 	bl	8006f72 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004efe:	2181      	movs	r1, #129	; 0x81
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 ff6c 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 ff65 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f1c:	2182      	movs	r1, #130	; 0x82
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 ff5d 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00e      	beq.n	8004f52 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 f8a9 	bl	800709c <free>
    pdev->pClassData = NULL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d039      	beq.n	8004ffa <USBD_CDC_Setup+0x9e>
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d17c      	bne.n	8005084 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	88db      	ldrh	r3, [r3, #6]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d029      	beq.n	8004fe6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	b25b      	sxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da11      	bge.n	8004fc0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004fa8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	88d2      	ldrh	r2, [r2, #6]
 8004fae:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fb0:	6939      	ldr	r1, [r7, #16]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	88db      	ldrh	r3, [r3, #6]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 fa31 	bl	8006420 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004fbe:	e068      	b.n	8005092 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785a      	ldrb	r2, [r3, #1]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	88db      	ldrh	r3, [r3, #6]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fa4c 	bl	800647c <USBD_CtlPrepareRx>
      break;
 8004fe4:	e055      	b.n	8005092 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	7850      	ldrb	r0, [r2, #1]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	4798      	blx	r3
      break;
 8004ff8:	e04b      	b.n	8005092 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b0a      	cmp	r3, #10
 8005000:	d017      	beq.n	8005032 <USBD_CDC_Setup+0xd6>
 8005002:	2b0b      	cmp	r3, #11
 8005004:	d029      	beq.n	800505a <USBD_CDC_Setup+0xfe>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d133      	bne.n	8005072 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005010:	2b03      	cmp	r3, #3
 8005012:	d107      	bne.n	8005024 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	2202      	movs	r2, #2
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 f9ff 	bl	8006420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005022:	e02e      	b.n	8005082 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f990 	bl	800634c <USBD_CtlError>
            ret = USBD_FAIL;
 800502c:	2302      	movs	r3, #2
 800502e:	75fb      	strb	r3, [r7, #23]
          break;
 8005030:	e027      	b.n	8005082 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005038:	2b03      	cmp	r3, #3
 800503a:	d107      	bne.n	800504c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800503c:	f107 030f 	add.w	r3, r7, #15
 8005040:	2201      	movs	r2, #1
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 f9eb 	bl	8006420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800504a:	e01a      	b.n	8005082 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 f97c 	bl	800634c <USBD_CtlError>
            ret = USBD_FAIL;
 8005054:	2302      	movs	r3, #2
 8005056:	75fb      	strb	r3, [r7, #23]
          break;
 8005058:	e013      	b.n	8005082 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005060:	2b03      	cmp	r3, #3
 8005062:	d00d      	beq.n	8005080 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 f970 	bl	800634c <USBD_CtlError>
            ret = USBD_FAIL;
 800506c:	2302      	movs	r3, #2
 800506e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005070:	e006      	b.n	8005080 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 f969 	bl	800634c <USBD_CtlError>
          ret = USBD_FAIL;
 800507a:	2302      	movs	r3, #2
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e000      	b.n	8005082 <USBD_CDC_Setup+0x126>
          break;
 8005080:	bf00      	nop
      }
      break;
 8005082:	e006      	b.n	8005092 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 f960 	bl	800634c <USBD_CtlError>
      ret = USBD_FAIL;
 800508c:	2302      	movs	r3, #2
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	bf00      	nop
  }

  return ret;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050b6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d03a      	beq.n	8005138 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	331c      	adds	r3, #28
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d029      	beq.n	800512c <USBD_CDC_DataIn+0x90>
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	331c      	adds	r3, #28
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	78f9      	ldrb	r1, [r7, #3]
 80050ec:	68b8      	ldr	r0, [r7, #8]
 80050ee:	460b      	mov	r3, r1
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a5b      	subs	r3, r3, r1
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4403      	add	r3, r0
 80050f8:	3344      	adds	r3, #68	; 0x44
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005100:	fb03 f301 	mul.w	r3, r3, r1
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d110      	bne.n	800512c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800510a:	78fa      	ldrb	r2, [r7, #3]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	331c      	adds	r3, #28
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800511e:	78f9      	ldrb	r1, [r7, #3]
 8005120:	2300      	movs	r3, #0
 8005122:	2200      	movs	r2, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 ff01 	bl	8006f2c <USBD_LL_Transmit>
 800512a:	e003      	b.n	8005134 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005154:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 ff2c 	bl	8006fb8 <USBD_LL_GetRxDataSize>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005186:	4611      	mov	r1, r2
 8005188:	4798      	blx	r3

    return USBD_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e000      	b.n	8005190 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800518e:	2302      	movs	r3, #2
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d015      	beq.n	80051de <USBD_CDC_EP0_RxReady+0x46>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051b8:	2bff      	cmp	r3, #255	; 0xff
 80051ba:	d010      	beq.n	80051de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80051ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051d2:	b292      	uxth	r2, r2
 80051d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2243      	movs	r2, #67	; 0x43
 80051f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80051f6:	4b03      	ldr	r3, [pc, #12]	; (8005204 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000094 	.word	0x20000094

08005208 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2243      	movs	r2, #67	; 0x43
 8005214:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000050 	.word	0x20000050

08005228 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2243      	movs	r2, #67	; 0x43
 8005234:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005236:	4b03      	ldr	r3, [pc, #12]	; (8005244 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	200000d8 	.word	0x200000d8

08005248 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	220a      	movs	r2, #10
 8005254:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005256:	4b03      	ldr	r3, [pc, #12]	; (8005264 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000000c 	.word	0x2000000c

08005268 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005272:	2302      	movs	r3, #2
 8005274:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01c      	beq.n	8005340 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800530c:	2b00      	cmp	r3, #0
 800530e:	d115      	bne.n	800533c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800532e:	b29b      	uxth	r3, r3
 8005330:	2181      	movs	r1, #129	; 0x81
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fdfa 	bl	8006f2c <USBD_LL_Transmit>

      return USBD_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e002      	b.n	8005342 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005358:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7c1b      	ldrb	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005376:	2101      	movs	r1, #1
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 fdfa 	bl	8006f72 <USBD_LL_PrepareReceive>
 800537e:	e007      	b.n	8005390 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005386:	2340      	movs	r3, #64	; 0x40
 8005388:	2101      	movs	r1, #1
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fdf1 	bl	8006f72 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053b2:	2302      	movs	r3, #2
 80053b4:	e01a      	b.n	80053ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	79fa      	ldrb	r2, [r7, #7]
 80053e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f001 fc6f 	bl	8006cc8 <USBD_LL_Init>

  return USBD_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e001      	b.n	800541a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005416:	2302      	movs	r3, #2
 8005418:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 fc94 	bl	8006d5c <USBD_LL_Start>

  return USBD_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800545e:	2302      	movs	r3, #2
 8005460:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	4611      	mov	r1, r2
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	4611      	mov	r1, r2
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3

  return USBD_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 ff03 	bl	80062d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d00c      	beq.n	800550c <USBD_LL_SetupStage+0x56>
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d302      	bcc.n	80054fc <USBD_LL_SetupStage+0x46>
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d010      	beq.n	800551c <USBD_LL_SetupStage+0x66>
 80054fa:	e017      	b.n	800552c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa03 	bl	8005910 <USBD_StdDevReq>
      break;
 800550a:	e01a      	b.n	8005542 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fa65 	bl	80059e4 <USBD_StdItfReq>
      break;
 800551a:	e012      	b.n	8005542 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 faa3 	bl	8005a70 <USBD_StdEPReq>
      break;
 800552a:	e00a      	b.n	8005542 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005536:	b2db      	uxtb	r3, r3
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fc6e 	bl	8006e1c <USBD_LL_StallEP>
      break;
 8005540:	bf00      	nop
  }

  return USBD_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	460b      	mov	r3, r1
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d14b      	bne.n	80055f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005566:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800556e:	2b03      	cmp	r3, #3
 8005570:	d134      	bne.n	80055dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d919      	bls.n	80055b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005594:	429a      	cmp	r2, r3
 8005596:	d203      	bcs.n	80055a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800559c:	b29b      	uxth	r3, r3
 800559e:	e002      	b.n	80055a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 ff84 	bl	80064b8 <USBD_CtlContinueRx>
 80055b0:	e038      	b.n	8005624 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d105      	bne.n	80055d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 ff81 	bl	80064dc <USBD_CtlSendStatus>
 80055da:	e023      	b.n	8005624 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d11e      	bne.n	8005624 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055ee:	2100      	movs	r1, #0
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f001 fc13 	bl	8006e1c <USBD_LL_StallEP>
 80055f6:	e015      	b.n	8005624 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00d      	beq.n	8005620 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800560a:	2b03      	cmp	r3, #3
 800560c:	d108      	bne.n	8005620 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	7afa      	ldrb	r2, [r7, #11]
 8005618:	4611      	mov	r1, r2
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	4798      	blx	r3
 800561e:	e001      	b.n	8005624 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005620:	2302      	movs	r3, #2
 8005622:	e000      	b.n	8005626 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	460b      	mov	r3, r1
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800563c:	7afb      	ldrb	r3, [r7, #11]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d17f      	bne.n	8005742 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3314      	adds	r3, #20
 8005646:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800564e:	2b02      	cmp	r3, #2
 8005650:	d15c      	bne.n	800570c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	d915      	bls.n	800568a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 feee 	bl	8006458 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800567c:	2300      	movs	r3, #0
 800567e:	2200      	movs	r2, #0
 8005680:	2100      	movs	r1, #0
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f001 fc75 	bl	8006f72 <USBD_LL_PrepareReceive>
 8005688:	e04e      	b.n	8005728 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	6912      	ldr	r2, [r2, #16]
 8005692:	fbb3 f1f2 	udiv	r1, r3, r2
 8005696:	fb02 f201 	mul.w	r2, r2, r1
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11c      	bne.n	80056da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d316      	bcc.n	80056da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d20f      	bcs.n	80056da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056ba:	2200      	movs	r2, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 feca 	bl	8006458 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056cc:	2300      	movs	r3, #0
 80056ce:	2200      	movs	r2, #0
 80056d0:	2100      	movs	r1, #0
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 fc4d 	bl	8006f72 <USBD_LL_PrepareReceive>
 80056d8:	e026      	b.n	8005728 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d105      	bne.n	80056fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 fb8c 	bl	8006e1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fefc 	bl	8006502 <USBD_CtlReceiveStatus>
 800570a:	e00d      	b.n	8005728 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005712:	2b04      	cmp	r3, #4
 8005714:	d004      	beq.n	8005720 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800571c:	2b00      	cmp	r3, #0
 800571e:	d103      	bne.n	8005728 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f001 fb7a 	bl	8006e1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d11d      	bne.n	800576e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff fe83 	bl	800543e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005740:	e015      	b.n	800576e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005754:	2b03      	cmp	r3, #3
 8005756:	d108      	bne.n	800576a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	7afa      	ldrb	r2, [r7, #11]
 8005762:	4611      	mov	r1, r2
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	4798      	blx	r3
 8005768:	e001      	b.n	800576e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800576a:	2302      	movs	r3, #2
 800576c:	e000      	b.n	8005770 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005780:	2340      	movs	r3, #64	; 0x40
 8005782:	2200      	movs	r2, #0
 8005784:	2100      	movs	r1, #0
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fb03 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 faf5 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2240      	movs	r2, #64	; 0x40
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	4611      	mov	r1, r2
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
  }

  return USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2204      	movs	r2, #4
 8005830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800584e:	2b04      	cmp	r3, #4
 8005850:	d105      	bne.n	800585e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005878:	2b03      	cmp	r3, #3
 800587a:	d10b      	bne.n	8005894 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6852      	ldr	r2, [r2, #4]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	4611      	mov	r1, r2
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3

  return USBD_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005926:	2b20      	cmp	r3, #32
 8005928:	d004      	beq.n	8005934 <USBD_StdDevReq+0x24>
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d002      	beq.n	8005934 <USBD_StdDevReq+0x24>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <USBD_StdDevReq+0x34>
 8005932:	e04c      	b.n	80059ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
      break;
 8005942:	e049      	b.n	80059d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b09      	cmp	r3, #9
 800594a:	d83a      	bhi.n	80059c2 <USBD_StdDevReq+0xb2>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <USBD_StdDevReq+0x44>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080059b9 	.word	0x080059b9
 800595c:	080059c3 	.word	0x080059c3
 8005960:	080059af 	.word	0x080059af
 8005964:	080059c3 	.word	0x080059c3
 8005968:	08005987 	.word	0x08005987
 800596c:	0800597d 	.word	0x0800597d
 8005970:	080059c3 	.word	0x080059c3
 8005974:	0800599b 	.word	0x0800599b
 8005978:	08005991 	.word	0x08005991
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9d4 	bl	8005d2c <USBD_GetDescriptor>
          break;
 8005984:	e022      	b.n	80059cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fb37 	bl	8005ffc <USBD_SetAddress>
          break;
 800598e:	e01d      	b.n	80059cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fb74 	bl	8006080 <USBD_SetConfig>
          break;
 8005998:	e018      	b.n	80059cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fbfd 	bl	800619c <USBD_GetConfig>
          break;
 80059a2:	e013      	b.n	80059cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fc2c 	bl	8006204 <USBD_GetStatus>
          break;
 80059ac:	e00e      	b.n	80059cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fc5a 	bl	800626a <USBD_SetFeature>
          break;
 80059b6:	e009      	b.n	80059cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fc69 	bl	8006292 <USBD_ClrFeature>
          break;
 80059c0:	e004      	b.n	80059cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fcc1 	bl	800634c <USBD_CtlError>
          break;
 80059ca:	bf00      	nop
      }
      break;
 80059cc:	e004      	b.n	80059d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fcbb 	bl	800634c <USBD_CtlError>
      break;
 80059d6:	bf00      	nop
  }

  return ret;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop

080059e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d003      	beq.n	8005a06 <USBD_StdItfReq+0x22>
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d001      	beq.n	8005a06 <USBD_StdItfReq+0x22>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d12a      	bne.n	8005a5c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d81d      	bhi.n	8005a4e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	889b      	ldrh	r3, [r3, #4]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d813      	bhi.n	8005a44 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	4798      	blx	r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	88db      	ldrh	r3, [r3, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d110      	bne.n	8005a58 <USBD_StdItfReq+0x74>
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fd4d 	bl	80064dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a42:	e009      	b.n	8005a58 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fc80 	bl	800634c <USBD_CtlError>
          break;
 8005a4c:	e004      	b.n	8005a58 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fc7b 	bl	800634c <USBD_CtlError>
          break;
 8005a56:	e000      	b.n	8005a5a <USBD_StdItfReq+0x76>
          break;
 8005a58:	bf00      	nop
      }
      break;
 8005a5a:	e004      	b.n	8005a66 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fc74 	bl	800634c <USBD_CtlError>
      break;
 8005a64:	bf00      	nop
  }

  return USBD_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	889b      	ldrh	r3, [r3, #4]
 8005a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d004      	beq.n	8005a9a <USBD_StdEPReq+0x2a>
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d002      	beq.n	8005a9a <USBD_StdEPReq+0x2a>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <USBD_StdEPReq+0x3a>
 8005a98:	e13d      	b.n	8005d16 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      break;
 8005aa8:	e13a      	b.n	8005d20 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d10a      	bne.n	8005acc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	e12a      	b.n	8005d22 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d03e      	beq.n	8005b52 <USBD_StdEPReq+0xe2>
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d002      	beq.n	8005ade <USBD_StdEPReq+0x6e>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d070      	beq.n	8005bbe <USBD_StdEPReq+0x14e>
 8005adc:	e115      	b.n	8005d0a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d002      	beq.n	8005aee <USBD_StdEPReq+0x7e>
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d015      	beq.n	8005b18 <USBD_StdEPReq+0xa8>
 8005aec:	e02b      	b.n	8005b46 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aee:	7bbb      	ldrb	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00c      	beq.n	8005b0e <USBD_StdEPReq+0x9e>
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d009      	beq.n	8005b0e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 f98c 	bl	8006e1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b04:	2180      	movs	r1, #128	; 0x80
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 f988 	bl	8006e1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b0c:	e020      	b.n	8005b50 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fc1b 	bl	800634c <USBD_CtlError>
              break;
 8005b16:	e01b      	b.n	8005b50 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	885b      	ldrh	r3, [r3, #2]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10e      	bne.n	8005b3e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <USBD_StdEPReq+0xce>
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d008      	beq.n	8005b3e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 f96f 	bl	8006e1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fccc 	bl	80064dc <USBD_CtlSendStatus>

              break;
 8005b44:	e004      	b.n	8005b50 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fbff 	bl	800634c <USBD_CtlError>
              break;
 8005b4e:	bf00      	nop
          }
          break;
 8005b50:	e0e0      	b.n	8005d14 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d002      	beq.n	8005b62 <USBD_StdEPReq+0xf2>
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d015      	beq.n	8005b8c <USBD_StdEPReq+0x11c>
 8005b60:	e026      	b.n	8005bb0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <USBD_StdEPReq+0x112>
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	2b80      	cmp	r3, #128	; 0x80
 8005b6c:	d009      	beq.n	8005b82 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 f952 	bl	8006e1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 f94e 	bl	8006e1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b80:	e01c      	b.n	8005bbc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fbe1 	bl	800634c <USBD_CtlError>
              break;
 8005b8a:	e017      	b.n	8005bbc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	885b      	ldrh	r3, [r3, #2]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d112      	bne.n	8005bba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 f959 	bl	8006e5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fc97 	bl	80064dc <USBD_CtlSendStatus>
              }
              break;
 8005bae:	e004      	b.n	8005bba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fbca 	bl	800634c <USBD_CtlError>
              break;
 8005bb8:	e000      	b.n	8005bbc <USBD_StdEPReq+0x14c>
              break;
 8005bba:	bf00      	nop
          }
          break;
 8005bbc:	e0aa      	b.n	8005d14 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d002      	beq.n	8005bce <USBD_StdEPReq+0x15e>
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d032      	beq.n	8005c32 <USBD_StdEPReq+0x1c2>
 8005bcc:	e097      	b.n	8005cfe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <USBD_StdEPReq+0x174>
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b80      	cmp	r3, #128	; 0x80
 8005bd8:	d004      	beq.n	8005be4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fbb5 	bl	800634c <USBD_CtlError>
                break;
 8005be2:	e091      	b.n	8005d08 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	da0b      	bge.n	8005c04 <USBD_StdEPReq+0x194>
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	3310      	adds	r3, #16
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	3304      	adds	r3, #4
 8005c02:	e00b      	b.n	8005c1c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2202      	movs	r2, #2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fbf8 	bl	8006420 <USBD_CtlSendData>
              break;
 8005c30:	e06a      	b.n	8005d08 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da11      	bge.n	8005c5e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d117      	bne.n	8005c84 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fb78 	bl	800634c <USBD_CtlError>
                  break;
 8005c5c:	e054      	b.n	8005d08 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c5e:	7bbb      	ldrb	r3, [r7, #14]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb65 	bl	800634c <USBD_CtlError>
                  break;
 8005c82:	e041      	b.n	8005d08 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	da0b      	bge.n	8005ca4 <USBD_StdEPReq+0x234>
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	3310      	adds	r3, #16
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	e00b      	b.n	8005cbc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	3304      	adds	r3, #4
 8005cbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <USBD_StdEPReq+0x25a>
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d103      	bne.n	8005cd2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e00e      	b.n	8005cf0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 f8de 	bl	8006e98 <USBD_LL_IsStallEP>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e002      	b.n	8005cf0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fb92 	bl	8006420 <USBD_CtlSendData>
              break;
 8005cfc:	e004      	b.n	8005d08 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fb23 	bl	800634c <USBD_CtlError>
              break;
 8005d06:	bf00      	nop
          }
          break;
 8005d08:	e004      	b.n	8005d14 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fb1d 	bl	800634c <USBD_CtlError>
          break;
 8005d12:	bf00      	nop
      }
      break;
 8005d14:	e004      	b.n	8005d20 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb17 	bl	800634c <USBD_CtlError>
      break;
 8005d1e:	bf00      	nop
  }

  return ret;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	885b      	ldrh	r3, [r3, #2]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	f200 8128 	bhi.w	8005fa2 <USBD_GetDescriptor+0x276>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <USBD_GetDescriptor+0x2c>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005dcd 	.word	0x08005dcd
 8005d64:	08005fa3 	.word	0x08005fa3
 8005d68:	08005fa3 	.word	0x08005fa3
 8005d6c:	08005f43 	.word	0x08005f43
 8005d70:	08005f6f 	.word	0x08005f6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
      break;
 8005d8a:	e112      	b.n	8005fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	7c1b      	ldrb	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10d      	bne.n	8005db0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f107 0208 	add.w	r2, r7, #8
 8005da0:	4610      	mov	r0, r2
 8005da2:	4798      	blx	r3
 8005da4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	2202      	movs	r2, #2
 8005dac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005dae:	e100      	b.n	8005fb2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f107 0208 	add.w	r2, r7, #8
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4798      	blx	r3
 8005dc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	701a      	strb	r2, [r3, #0]
      break;
 8005dca:	e0f2      	b.n	8005fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	885b      	ldrh	r3, [r3, #2]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	f200 80ac 	bhi.w	8005f30 <USBD_GetDescriptor+0x204>
 8005dd8:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <USBD_GetDescriptor+0xb4>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005e2d 	.word	0x08005e2d
 8005de8:	08005e61 	.word	0x08005e61
 8005dec:	08005e95 	.word	0x08005e95
 8005df0:	08005ec9 	.word	0x08005ec9
 8005df4:	08005efd 	.word	0x08005efd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	7c12      	ldrb	r2, [r2, #16]
 8005e10:	f107 0108 	add.w	r1, r7, #8
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
 8005e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1a:	e091      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa94 	bl	800634c <USBD_CtlError>
            err++;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	3301      	adds	r3, #1
 8005e28:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2a:	e089      	b.n	8005f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	7c12      	ldrb	r2, [r2, #16]
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4e:	e077      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa7a 	bl	800634c <USBD_CtlError>
            err++;
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5e:	e06f      	b.n	8005f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	7c12      	ldrb	r2, [r2, #16]
 8005e78:	f107 0108 	add.w	r1, r7, #8
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
 8005e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e82:	e05d      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa60 	bl	800634c <USBD_CtlError>
            err++;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	72fb      	strb	r3, [r7, #11]
          break;
 8005e92:	e055      	b.n	8005f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	7c12      	ldrb	r2, [r2, #16]
 8005eac:	f107 0108 	add.w	r1, r7, #8
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eb6:	e043      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa46 	bl	800634c <USBD_CtlError>
            err++;
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ec6:	e03b      	b.n	8005f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	7c12      	ldrb	r2, [r2, #16]
 8005ee0:	f107 0108 	add.w	r1, r7, #8
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
 8005ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eea:	e029      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa2c 	bl	800634c <USBD_CtlError>
            err++;
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8005efa:	e021      	b.n	8005f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	7c12      	ldrb	r2, [r2, #16]
 8005f14:	f107 0108 	add.w	r1, r7, #8
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
 8005f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f1e:	e00f      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fa12 	bl	800634c <USBD_CtlError>
            err++;
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f2e:	e007      	b.n	8005f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa0a 	bl	800634c <USBD_CtlError>
          err++;
 8005f38:	7afb      	ldrb	r3, [r7, #11]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005f3e:	e038      	b.n	8005fb2 <USBD_GetDescriptor+0x286>
 8005f40:	e037      	b.n	8005fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	7c1b      	ldrb	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	f107 0208 	add.w	r2, r7, #8
 8005f56:	4610      	mov	r0, r2
 8005f58:	4798      	blx	r3
 8005f5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f5c:	e029      	b.n	8005fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9f3 	bl	800634c <USBD_CtlError>
        err++;
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f6c:	e021      	b.n	8005fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7c1b      	ldrb	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10d      	bne.n	8005f92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f107 0208 	add.w	r2, r7, #8
 8005f82:	4610      	mov	r0, r2
 8005f84:	4798      	blx	r3
 8005f86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f90:	e00f      	b.n	8005fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f9d9 	bl	800634c <USBD_CtlError>
        err++;
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8005fa0:	e007      	b.n	8005fb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9d1 	bl	800634c <USBD_CtlError>
      err++;
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	3301      	adds	r3, #1
 8005fae:	72fb      	strb	r3, [r7, #11]
      break;
 8005fb0:	bf00      	nop
  }

  if (err != 0U)
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11c      	bne.n	8005ff2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005fb8:	893b      	ldrh	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <USBD_GetDescriptor+0x2b6>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	88db      	ldrh	r3, [r3, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00d      	beq.n	8005fe2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	88da      	ldrh	r2, [r3, #6]
 8005fca:	893b      	ldrh	r3, [r7, #8]
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	bf28      	it	cs
 8005fd0:	4613      	movcs	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fd6:	893b      	ldrh	r3, [r7, #8]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa1f 	bl	8006420 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	88db      	ldrh	r3, [r3, #6]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa76 	bl	80064dc <USBD_CtlSendStatus>
 8005ff0:	e000      	b.n	8005ff4 <USBD_GetDescriptor+0x2c8>
    return;
 8005ff2:	bf00      	nop
    }
  }
}
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop

08005ffc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	889b      	ldrh	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d130      	bne.n	8006070 <USBD_SetAddress+0x74>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	88db      	ldrh	r3, [r3, #6]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d12c      	bne.n	8006070 <USBD_SetAddress+0x74>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	885b      	ldrh	r3, [r3, #2]
 800601a:	2b7f      	cmp	r3, #127	; 0x7f
 800601c:	d828      	bhi.n	8006070 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	885b      	ldrh	r3, [r3, #2]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006028:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	2b03      	cmp	r3, #3
 8006032:	d104      	bne.n	800603e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f988 	bl	800634c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603c:	e01c      	b.n	8006078 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7bfa      	ldrb	r2, [r7, #15]
 8006042:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 ff4f 	bl	8006eee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa43 	bl	80064dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006064:	e008      	b.n	8006078 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606e:	e003      	b.n	8006078 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f96a 	bl	800634c <USBD_CtlError>
  }
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	885b      	ldrh	r3, [r3, #2]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	4b41      	ldr	r3, [pc, #260]	; (8006198 <USBD_SetConfig+0x118>)
 8006092:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006094:	4b40      	ldr	r3, [pc, #256]	; (8006198 <USBD_SetConfig+0x118>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d904      	bls.n	80060a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f954 	bl	800634c <USBD_CtlError>
 80060a4:	e075      	b.n	8006192 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d002      	beq.n	80060b6 <USBD_SetConfig+0x36>
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d023      	beq.n	80060fc <USBD_SetConfig+0x7c>
 80060b4:	e062      	b.n	800617c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80060b6:	4b38      	ldr	r3, [pc, #224]	; (8006198 <USBD_SetConfig+0x118>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01a      	beq.n	80060f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80060be:	4b36      	ldr	r3, [pc, #216]	; (8006198 <USBD_SetConfig+0x118>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2203      	movs	r2, #3
 80060cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060d0:	4b31      	ldr	r3, [pc, #196]	; (8006198 <USBD_SetConfig+0x118>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff f9bb 	bl	8005452 <USBD_SetClassConfig>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d104      	bne.n	80060ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f931 	bl	800634c <USBD_CtlError>
            return;
 80060ea:	e052      	b.n	8006192 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9f5 	bl	80064dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80060f2:	e04e      	b.n	8006192 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f9f1 	bl	80064dc <USBD_CtlSendStatus>
        break;
 80060fa:	e04a      	b.n	8006192 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80060fc:	4b26      	ldr	r3, [pc, #152]	; (8006198 <USBD_SetConfig+0x118>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d112      	bne.n	800612a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800610c:	4b22      	ldr	r3, [pc, #136]	; (8006198 <USBD_SetConfig+0x118>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006116:	4b20      	ldr	r3, [pc, #128]	; (8006198 <USBD_SetConfig+0x118>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff f9b7 	bl	8005490 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9da 	bl	80064dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006128:	e033      	b.n	8006192 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800612a:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <USBD_SetConfig+0x118>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	d01d      	beq.n	8006174 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff f9a5 	bl	8005490 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <USBD_SetConfig+0x118>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <USBD_SetConfig+0x118>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff f97b 	bl	8005452 <USBD_SetClassConfig>
 800615c:	4603      	mov	r3, r0
 800615e:	2b02      	cmp	r3, #2
 8006160:	d104      	bne.n	800616c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8f1 	bl	800634c <USBD_CtlError>
            return;
 800616a:	e012      	b.n	8006192 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f9b5 	bl	80064dc <USBD_CtlSendStatus>
        break;
 8006172:	e00e      	b.n	8006192 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f9b1 	bl	80064dc <USBD_CtlSendStatus>
        break;
 800617a:	e00a      	b.n	8006192 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8e4 	bl	800634c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <USBD_SetConfig+0x118>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff f980 	bl	8005490 <USBD_ClrClassConfig>
        break;
 8006190:	bf00      	nop
    }
  }
}
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000210 	.word	0x20000210

0800619c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	88db      	ldrh	r3, [r3, #6]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d004      	beq.n	80061b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f8cb 	bl	800634c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80061b6:	e021      	b.n	80061fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	db17      	blt.n	80061f2 <USBD_GetConfig+0x56>
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	dd02      	ble.n	80061cc <USBD_GetConfig+0x30>
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d00b      	beq.n	80061e2 <USBD_GetConfig+0x46>
 80061ca:	e012      	b.n	80061f2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3308      	adds	r3, #8
 80061d6:	2201      	movs	r2, #1
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f920 	bl	8006420 <USBD_CtlSendData>
        break;
 80061e0:	e00c      	b.n	80061fc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2201      	movs	r2, #1
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f918 	bl	8006420 <USBD_CtlSendData>
        break;
 80061f0:	e004      	b.n	80061fc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8a9 	bl	800634c <USBD_CtlError>
        break;
 80061fa:	bf00      	nop
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	3b01      	subs	r3, #1
 8006216:	2b02      	cmp	r3, #2
 8006218:	d81e      	bhi.n	8006258 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d004      	beq.n	800622c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f891 	bl	800634c <USBD_CtlError>
        break;
 800622a:	e01a      	b.n	8006262 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f043 0202 	orr.w	r2, r3, #2
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	330c      	adds	r3, #12
 800624c:	2202      	movs	r2, #2
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8e5 	bl	8006420 <USBD_CtlSendData>
      break;
 8006256:	e004      	b.n	8006262 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f876 	bl	800634c <USBD_CtlError>
      break;
 8006260:	bf00      	nop
  }
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	885b      	ldrh	r3, [r3, #2]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f929 	bl	80064dc <USBD_CtlSendStatus>
  }
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a2:	3b01      	subs	r3, #1
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d80b      	bhi.n	80062c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	885b      	ldrh	r3, [r3, #2]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10c      	bne.n	80062ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f90f 	bl	80064dc <USBD_CtlSendStatus>
      }
      break;
 80062be:	e004      	b.n	80062ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f842 	bl	800634c <USBD_CtlError>
      break;
 80062c8:	e000      	b.n	80062cc <USBD_ClrFeature+0x3a>
      break;
 80062ca:	bf00      	nop
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781a      	ldrb	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	785a      	ldrb	r2, [r3, #1]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	3302      	adds	r3, #2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	3303      	adds	r3, #3
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	b29b      	uxth	r3, r3
 8006302:	4413      	add	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	3304      	adds	r3, #4
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	b29a      	uxth	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	3305      	adds	r3, #5
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	b29b      	uxth	r3, r3
 800631e:	4413      	add	r3, r2
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	3306      	adds	r3, #6
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	3307      	adds	r3, #7
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	b29b      	uxth	r3, r3
 800633a:	4413      	add	r3, r2
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	80da      	strh	r2, [r3, #6]

}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006356:	2180      	movs	r1, #128	; 0x80
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fd5f 	bl	8006e1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800635e:	2100      	movs	r1, #0
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fd5b 	bl	8006e1c <USBD_LL_StallEP>
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b086      	sub	sp, #24
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d032      	beq.n	80063ea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f834 	bl	80063f2 <USBD_GetLen>
 800638a:	4603      	mov	r3, r0
 800638c:	3301      	adds	r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	75fa      	strb	r2, [r7, #23]
 800639e:	461a      	mov	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4413      	add	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	75fa      	strb	r2, [r7, #23]
 80063b0:	461a      	mov	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4413      	add	r3, r2
 80063b6:	2203      	movs	r2, #3
 80063b8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80063ba:	e012      	b.n	80063e2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	60fa      	str	r2, [r7, #12]
 80063c2:	7dfa      	ldrb	r2, [r7, #23]
 80063c4:	1c51      	adds	r1, r2, #1
 80063c6:	75f9      	strb	r1, [r7, #23]
 80063c8:	4611      	mov	r1, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	440a      	add	r2, r1
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	75fa      	strb	r2, [r7, #23]
 80063d8:	461a      	mov	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e8      	bne.n	80063bc <USBD_GetString+0x4e>
    }
  }
}
 80063ea:	bf00      	nop
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80063fe:	e005      	b.n	800640c <USBD_GetLen+0x1a>
  {
    len++;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	3301      	adds	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3301      	adds	r3, #1
 800640a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f5      	bne.n	8006400 <USBD_GetLen+0xe>
  }

  return len;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2202      	movs	r2, #2
 8006432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fd6f 	bl	8006f2c <USBD_LL_Transmit>

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	2100      	movs	r1, #0
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fd5d 	bl	8006f2c <USBD_LL_Transmit>

  return USBD_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2203      	movs	r2, #3
 800648e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fd62 	bl	8006f72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	2100      	movs	r1, #0
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fd50 	bl	8006f72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2204      	movs	r2, #4
 80064e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064ec:	2300      	movs	r3, #0
 80064ee:	2200      	movs	r2, #0
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fd1a 	bl	8006f2c <USBD_LL_Transmit>

  return USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2205      	movs	r2, #5
 800650e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006512:	2300      	movs	r3, #0
 8006514:	2200      	movs	r2, #0
 8006516:	2100      	movs	r1, #0
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd2a 	bl	8006f72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <usb_check_buffer>:
void usb_write(uint8_t *buffer, size_t len)
{
	CDC_Transmit_FS(buffer, len);
}
uint8_t usb_check_buffer(void)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
	uint8_t bytes_in_buffer = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	71fb      	strb	r3, [r7, #7]
	// When the head and tail of the circular buffer are at different point we have data
	if ((cdc_rx_head != cdc_rx_tail))
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <usb_check_buffer+0x4c>)
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <usb_check_buffer+0x50>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d014      	beq.n	8006568 <usb_check_buffer+0x40>
	{
		// Handle data wraps across the buffer end boundary
		if (cdc_rx_head < cdc_rx_tail)
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <usb_check_buffer+0x4c>)
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <usb_check_buffer+0x50>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d208      	bcs.n	800655c <usb_check_buffer+0x34>
		{
			bytes_in_buffer = cdc_rx_head
					+ (CIRCULAR_BUFFER_SIZE - cdc_rx_tail);
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <usb_check_buffer+0x4c>)
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <usb_check_buffer+0x50>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	b2db      	uxtb	r3, r3
			bytes_in_buffer = cdc_rx_head
 8006556:	3320      	adds	r3, #32
 8006558:	71fb      	strb	r3, [r7, #7]
 800655a:	e005      	b.n	8006568 <usb_check_buffer+0x40>
		}
		else
		{
			bytes_in_buffer = cdc_rx_head - cdc_rx_tail;
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <usb_check_buffer+0x4c>)
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <usb_check_buffer+0x50>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	71fb      	strb	r3, [r7, #7]
		}
	}
	return bytes_in_buffer;
 8006568:	79fb      	ldrb	r3, [r7, #7]
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr
 8006574:	20000234 	.word	0x20000234
 8006578:	20000235 	.word	0x20000235

0800657c <usb_get_byte>:
uint8_t usb_get_byte(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
	if (cdc_rx_tail == CIRCULAR_BUFFER_SIZE)
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <usb_get_byte+0x2c>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b20      	cmp	r3, #32
 8006586:	d102      	bne.n	800658e <usb_get_byte+0x12>
	{
		cdc_rx_tail = 0;
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <usb_get_byte+0x2c>)
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
	}
	return cdc_rx_buffer[cdc_rx_tail++];
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <usb_get_byte+0x2c>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	b2d1      	uxtb	r1, r2
 8006596:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <usb_get_byte+0x2c>)
 8006598:	7011      	strb	r1, [r2, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	4b03      	ldr	r3, [pc, #12]	; (80065ac <usb_get_byte+0x30>)
 800659e:	5c9b      	ldrb	r3, [r3, r2]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	20000235 	.word	0x20000235
 80065ac:	20000214 	.word	0x20000214

080065b0 <usb_receive_data>:
void usb_receive_data(uint8_t *data_in, size_t len)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
	for (size_t i = 0; i < len; i++)
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e016      	b.n	80065ee <usb_receive_data+0x3e>
	{
		if (cdc_rx_head == CIRCULAR_BUFFER_SIZE)
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <usb_receive_data+0x50>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d102      	bne.n	80065ce <usb_receive_data+0x1e>
		{
			cdc_rx_head = 0;
 80065c8:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <usb_receive_data+0x50>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
		}
		// copy from the CDC buffer to the circular buffer
		cdc_rx_buffer[cdc_rx_head++] = data_in[i];
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	441a      	add	r2, r3
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <usb_receive_data+0x50>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	1c59      	adds	r1, r3, #1
 80065da:	b2c8      	uxtb	r0, r1
 80065dc:	4908      	ldr	r1, [pc, #32]	; (8006600 <usb_receive_data+0x50>)
 80065de:	7008      	strb	r0, [r1, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <usb_receive_data+0x54>)
 80065e6:	545a      	strb	r2, [r3, r1]
	for (size_t i = 0; i < len; i++)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d3e4      	bcc.n	80065c0 <usb_receive_data+0x10>
	}
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	20000234 	.word	0x20000234
 8006604:	20000214 	.word	0x20000214

08006608 <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800660c:	2200      	movs	r2, #0
 800660e:	4912      	ldr	r1, [pc, #72]	; (8006658 <MX_USB_DEVICE_Init+0x50>)
 8006610:	4812      	ldr	r0, [pc, #72]	; (800665c <MX_USB_DEVICE_Init+0x54>)
 8006612:	f7fe fec4 	bl	800539e <USBD_Init>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <MX_USB_DEVICE_Init+0x18>
	{
		Error_Handler();
 800661c:	f7fa f955 	bl	80008ca <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006620:	490f      	ldr	r1, [pc, #60]	; (8006660 <MX_USB_DEVICE_Init+0x58>)
 8006622:	480e      	ldr	r0, [pc, #56]	; (800665c <MX_USB_DEVICE_Init+0x54>)
 8006624:	f7fe fee6 	bl	80053f4 <USBD_RegisterClass>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <MX_USB_DEVICE_Init+0x2a>
	{
		Error_Handler();
 800662e:	f7fa f94c 	bl	80008ca <Error_Handler>
	}
	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS)
 8006632:	490c      	ldr	r1, [pc, #48]	; (8006664 <MX_USB_DEVICE_Init+0x5c>)
 8006634:	4809      	ldr	r0, [pc, #36]	; (800665c <MX_USB_DEVICE_Init+0x54>)
 8006636:	f7fe fe17 	bl	8005268 <USBD_CDC_RegisterInterface>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <MX_USB_DEVICE_Init+0x3c>
			!= USBD_OK)
	{
		Error_Handler();
 8006640:	f7fa f943 	bl	80008ca <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006644:	4805      	ldr	r0, [pc, #20]	; (800665c <MX_USB_DEVICE_Init+0x54>)
 8006646:	f7fe feee 	bl	8005426 <USBD_Start>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <MX_USB_DEVICE_Init+0x4c>
	{
		Error_Handler();
 8006650:	f7fa f93b 	bl	80008ca <Error_Handler>
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000134 	.word	0x20000134
 800665c:	2000068c 	.word	0x2000068c
 8006660:	20000018 	.word	0x20000018
 8006664:	2000011c 	.word	0x2000011c

08006668 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800666c:	2200      	movs	r2, #0
 800666e:	4905      	ldr	r1, [pc, #20]	; (8006684 <CDC_Init_FS+0x1c>)
 8006670:	4805      	ldr	r0, [pc, #20]	; (8006688 <CDC_Init_FS+0x20>)
 8006672:	f7fe fe0f 	bl	8005294 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006676:	4905      	ldr	r1, [pc, #20]	; (800668c <CDC_Init_FS+0x24>)
 8006678:	4803      	ldr	r0, [pc, #12]	; (8006688 <CDC_Init_FS+0x20>)
 800667a:	f7fe fe24 	bl	80052c6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800667e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8006680:	4618      	mov	r0, r3
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20001150 	.word	0x20001150
 8006688:	2000068c 	.word	0x2000068c
 800668c:	20000950 	.word	0x20000950

08006690 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8006694:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8006696:	4618      	mov	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
	...

080066a0 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
 80066ac:	4613      	mov	r3, r2
 80066ae:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	2b23      	cmp	r3, #35	; 0x23
 80066b4:	d85c      	bhi.n	8006770 <CDC_Control_FS+0xd0>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <CDC_Control_FS+0x1c>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	08006771 	.word	0x08006771
 80066c0:	08006771 	.word	0x08006771
 80066c4:	08006771 	.word	0x08006771
 80066c8:	08006771 	.word	0x08006771
 80066cc:	08006771 	.word	0x08006771
 80066d0:	08006771 	.word	0x08006771
 80066d4:	08006771 	.word	0x08006771
 80066d8:	08006771 	.word	0x08006771
 80066dc:	08006771 	.word	0x08006771
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006771 	.word	0x08006771
 80066e8:	08006771 	.word	0x08006771
 80066ec:	08006771 	.word	0x08006771
 80066f0:	08006771 	.word	0x08006771
 80066f4:	08006771 	.word	0x08006771
 80066f8:	08006771 	.word	0x08006771
 80066fc:	08006771 	.word	0x08006771
 8006700:	08006771 	.word	0x08006771
 8006704:	08006771 	.word	0x08006771
 8006708:	08006771 	.word	0x08006771
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	08006771 	.word	0x08006771
 8006718:	08006771 	.word	0x08006771
 800671c:	08006771 	.word	0x08006771
 8006720:	08006771 	.word	0x08006771
 8006724:	08006771 	.word	0x08006771
 8006728:	08006771 	.word	0x08006771
 800672c:	08006771 	.word	0x08006771
 8006730:	08006771 	.word	0x08006771
 8006734:	08006771 	.word	0x08006771
 8006738:	08006771 	.word	0x08006771
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800675f 	.word	0x0800675f
 8006744:	08006771 	.word	0x08006771
 8006748:	08006771 	.word	0x08006771
		/*******************************************************************************/
		static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
		=
		{ 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 }; // 0001c200 >> 115200 arr[3],arr[2],arr[1],arr[0]
	case CDC_SET_LINE_CODING:
		memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <CDC_Control_FS+0xe0>)
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	6810      	ldr	r0, [r2, #0]
 8006752:	6018      	str	r0, [r3, #0]
 8006754:	8891      	ldrh	r1, [r2, #4]
 8006756:	7992      	ldrb	r2, [r2, #6]
 8006758:	8099      	strh	r1, [r3, #4]
 800675a:	719a      	strb	r2, [r3, #6]
		break;
 800675c:	e009      	b.n	8006772 <CDC_Control_FS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	4a07      	ldr	r2, [pc, #28]	; (8006780 <CDC_Control_FS+0xe0>)
 8006762:	6810      	ldr	r0, [r2, #0]
 8006764:	6018      	str	r0, [r3, #0]
 8006766:	8891      	ldrh	r1, [r2, #4]
 8006768:	7992      	ldrb	r2, [r2, #6]
 800676a:	8099      	strh	r1, [r3, #4]
 800676c:	719a      	strb	r2, [r3, #6]
		break;
 800676e:	e000      	b.n	8006772 <CDC_Control_FS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006770:	bf00      	nop
	}

	return (USBD_OK);
 8006772:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	2000012c 	.word	0x2000012c

08006784 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	usb_receive_data(Buf, *Len);  // insert the data into our circular buffer
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff ff0b 	bl	80065b0 <usb_receive_data>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4805      	ldr	r0, [pc, #20]	; (80067b4 <CDC_Receive_FS+0x30>)
 800679e:	f7fe fd92 	bl	80052c6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067a2:	4804      	ldr	r0, [pc, #16]	; (80067b4 <CDC_Receive_FS+0x30>)
 80067a4:	f7fe fdd1 	bl	800534a <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80067a8:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	2000068c 	.word	0x2000068c

080067b8 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <CDC_Transmit_FS+0x48>)
 80067ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ce:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 80067da:	2301      	movs	r3, #1
 80067dc:	e00b      	b.n	80067f6 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067de:	887b      	ldrh	r3, [r7, #2]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4806      	ldr	r0, [pc, #24]	; (8006800 <CDC_Transmit_FS+0x48>)
 80067e6:	f7fe fd55 	bl	8005294 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067ea:	4805      	ldr	r0, [pc, #20]	; (8006800 <CDC_Transmit_FS+0x48>)
 80067ec:	f7fe fd7e 	bl	80052ec <USBD_CDC_TransmitPacket>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	2000068c 	.word	0x2000068c

08006804 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2212      	movs	r2, #18
 8006814:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000150 	.word	0x20000150

08006828 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2204      	movs	r2, #4
 8006838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800683a:	4b03      	ldr	r3, [pc, #12]	; (8006848 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000164 	.word	0x20000164

0800684c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4907      	ldr	r1, [pc, #28]	; (8006880 <USBD_FS_ProductStrDescriptor+0x34>)
 8006862:	4808      	ldr	r0, [pc, #32]	; (8006884 <USBD_FS_ProductStrDescriptor+0x38>)
 8006864:	f7ff fd83 	bl	800636e <USBD_GetString>
 8006868:	e004      	b.n	8006874 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	4904      	ldr	r1, [pc, #16]	; (8006880 <USBD_FS_ProductStrDescriptor+0x34>)
 800686e:	4805      	ldr	r0, [pc, #20]	; (8006884 <USBD_FS_ProductStrDescriptor+0x38>)
 8006870:	f7ff fd7d 	bl	800636e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006874:	4b02      	ldr	r3, [pc, #8]	; (8006880 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20001950 	.word	0x20001950
 8006884:	080079b0 	.word	0x080079b0

08006888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	6039      	str	r1, [r7, #0]
 8006892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	4904      	ldr	r1, [pc, #16]	; (80068a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006898:	4804      	ldr	r0, [pc, #16]	; (80068ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800689a:	f7ff fd68 	bl	800636e <USBD_GetString>
  return USBD_StrDesc;
 800689e:	4b02      	ldr	r3, [pc, #8]	; (80068a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20001950 	.word	0x20001950
 80068ac:	080079c4 	.word	0x080079c4

080068b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	221a      	movs	r2, #26
 80068c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068c2:	f000 f843 	bl	800694c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068c6:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000168 	.word	0x20000168

080068d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	4603      	mov	r3, r0
 80068dc:	6039      	str	r1, [r7, #0]
 80068de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d105      	bne.n	80068f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4907      	ldr	r1, [pc, #28]	; (8006908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068ea:	4808      	ldr	r0, [pc, #32]	; (800690c <USBD_FS_ConfigStrDescriptor+0x38>)
 80068ec:	f7ff fd3f 	bl	800636e <USBD_GetString>
 80068f0:	e004      	b.n	80068fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4904      	ldr	r1, [pc, #16]	; (8006908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068f6:	4805      	ldr	r0, [pc, #20]	; (800690c <USBD_FS_ConfigStrDescriptor+0x38>)
 80068f8:	f7ff fd39 	bl	800636e <USBD_GetString>
  }
  return USBD_StrDesc;
 80068fc:	4b02      	ldr	r3, [pc, #8]	; (8006908 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20001950 	.word	0x20001950
 800690c:	080079d0 	.word	0x080079d0

08006910 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	6039      	str	r1, [r7, #0]
 800691a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	4907      	ldr	r1, [pc, #28]	; (8006944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006926:	4808      	ldr	r0, [pc, #32]	; (8006948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006928:	f7ff fd21 	bl	800636e <USBD_GetString>
 800692c:	e004      	b.n	8006938 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4904      	ldr	r1, [pc, #16]	; (8006944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006932:	4805      	ldr	r0, [pc, #20]	; (8006948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006934:	f7ff fd1b 	bl	800636e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20001950 	.word	0x20001950
 8006948:	080079dc 	.word	0x080079dc

0800694c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006952:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <Get_SerialNum+0x44>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006958:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <Get_SerialNum+0x48>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800695e:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <Get_SerialNum+0x4c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4413      	add	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006972:	2208      	movs	r2, #8
 8006974:	4909      	ldr	r1, [pc, #36]	; (800699c <Get_SerialNum+0x50>)
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f814 	bl	80069a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800697c:	2204      	movs	r2, #4
 800697e:	4908      	ldr	r1, [pc, #32]	; (80069a0 <Get_SerialNum+0x54>)
 8006980:	68b8      	ldr	r0, [r7, #8]
 8006982:	f000 f80f 	bl	80069a4 <IntToUnicode>
  }
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	1fff7a10 	.word	0x1fff7a10
 8006994:	1fff7a14 	.word	0x1fff7a14
 8006998:	1fff7a18 	.word	0x1fff7a18
 800699c:	2000016a 	.word	0x2000016a
 80069a0:	2000017a 	.word	0x2000017a

080069a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
 80069ba:	e027      	b.n	8006a0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	0f1b      	lsrs	r3, r3, #28
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	d80b      	bhi.n	80069dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	0f1b      	lsrs	r3, r3, #28
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4619      	mov	r1, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	440b      	add	r3, r1
 80069d4:	3230      	adds	r2, #48	; 0x30
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e00a      	b.n	80069f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0f1b      	lsrs	r3, r3, #28
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	4619      	mov	r1, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	440b      	add	r3, r1
 80069ec:	3237      	adds	r2, #55	; 0x37
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	3301      	adds	r3, #1
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
 8006a0c:	7dfa      	ldrb	r2, [r7, #23]
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3d3      	bcc.n	80069bc <IntToUnicode+0x18>
  }
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr
	...

08006a20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08a      	sub	sp, #40	; 0x28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a28:	f107 0314 	add.w	r3, r7, #20
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	605a      	str	r2, [r3, #4]
 8006a32:	609a      	str	r2, [r3, #8]
 8006a34:	60da      	str	r2, [r3, #12]
 8006a36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a40:	d147      	bne.n	8006ad2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	4b25      	ldr	r3, [pc, #148]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	4a24      	ldr	r2, [pc, #144]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	6313      	str	r3, [r2, #48]	; 0x30
 8006a52:	4b22      	ldr	r3, [pc, #136]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006a5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a64:	2302      	movs	r3, #2
 8006a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a70:	230a      	movs	r3, #10
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a74:	f107 0314 	add.w	r3, r7, #20
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4819      	ldr	r0, [pc, #100]	; (8006ae0 <HAL_PCD_MspInit+0xc0>)
 8006a7c:	f7fa fa9c 	bl	8000fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4619      	mov	r1, r3
 8006a94:	4812      	ldr	r0, [pc, #72]	; (8006ae0 <HAL_PCD_MspInit+0xc0>)
 8006a96:	f7fa fa8f 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a9a:	4b10      	ldr	r3, [pc, #64]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	4a0f      	ldr	r2, [pc, #60]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	6353      	str	r3, [r2, #52]	; 0x34
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	4a0b      	ldr	r2, [pc, #44]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_PCD_MspInit+0xbc>)
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2043      	movs	r0, #67	; 0x43
 8006ac8:	f7fa fa1f 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006acc:	2043      	movs	r0, #67	; 0x43
 8006ace:	f7fa fa38 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3728      	adds	r7, #40	; 0x28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40020000 	.word	0x40020000

08006ae4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7fe fcdb 	bl	80054b6 <USBD_LL_SetupStage>
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	4619      	mov	r1, r3
 8006b32:	f7fe fd0b 	bl	800554c <USBD_LL_DataOutStage>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3348      	adds	r3, #72	; 0x48
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	4619      	mov	r1, r3
 8006b66:	f7fe fd62 	bl	800562e <USBD_LL_DataInStage>
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fe72 	bl	800586a <USBD_LL_SOF>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e008      	b.n	8006bba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d102      	bne.n	8006bb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
 8006bb4:	e001      	b.n	8006bba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006bb6:	f7f9 fe88 	bl	80008ca <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fe18 	bl	80057fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fdd1 	bl	8005778 <USBD_LL_Reset>
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fe12 	bl	8005818 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <HAL_PCD_SuspendCallback+0x48>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	4a03      	ldr	r2, [pc, #12]	; (8006c28 <HAL_PCD_SuspendCallback+0x48>)
 8006c1a:	f043 0306 	orr.w	r3, r3, #6
 8006c1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed00 	.word	0xe000ed00

08006c2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fe00 	bl	8005840 <USBD_LL_Resume>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fe29 	bl	80058b6 <USBD_LL_IsoOUTIncomplete>
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fe0b 	bl	800589e <USBD_LL_IsoINIncomplete>
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fe15 	bl	80058ce <USBD_LL_DevConnected>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe fe11 	bl	80058e2 <USBD_LL_DevDisconnected>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d139      	bne.n	8006d4c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <USBD_LL_Init+0x90>)
 8006ce4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cf0:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d04:	2202      	movs	r2, #2
 8006d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006d14:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d20:	480d      	ldr	r0, [pc, #52]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d22:	f7fa fb21 	bl	8001368 <HAL_PCD_Init>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006d2c:	f7f9 fdcd 	bl	80008ca <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d30:	2180      	movs	r1, #128	; 0x80
 8006d32:	4809      	ldr	r0, [pc, #36]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d34:	f7fb fc5e 	bl	80025f4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d38:	2240      	movs	r2, #64	; 0x40
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4806      	ldr	r0, [pc, #24]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d3e:	f7fb fc13 	bl	8002568 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d42:	2280      	movs	r2, #128	; 0x80
 8006d44:	2101      	movs	r1, #1
 8006d46:	4804      	ldr	r0, [pc, #16]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d48:	f7fb fc0e 	bl	8002568 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20001b50 	.word	0x20001b50

08006d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa fc15 	bl	80015a2 <HAL_PCD_Start>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f92e 	bl	8006fe0 <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	70fb      	strb	r3, [r7, #3]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70bb      	strb	r3, [r7, #2]
 8006da8:	4613      	mov	r3, r2
 8006daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dba:	78bb      	ldrb	r3, [r7, #2]
 8006dbc:	883a      	ldrh	r2, [r7, #0]
 8006dbe:	78f9      	ldrb	r1, [r7, #3]
 8006dc0:	f7fa ffda 	bl	8001d78 <HAL_PCD_EP_Open>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f908 	bl	8006fe0 <USBD_Get_USB_Status>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fb f823 	bl	8001e48 <HAL_PCD_EP_Close>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f8e9 	bl	8006fe0 <USBD_Get_USB_Status>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb f8fa 	bl	8002034 <HAL_PCD_EP_SetStall>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f8ca 	bl	8006fe0 <USBD_Get_USB_Status>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fb f93f 	bl	80020fc <HAL_PCD_EP_ClrStall>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f8ab 	bl	8006fe0 <USBD_Get_USB_Status>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0b      	bge.n	8006ecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	333e      	adds	r3, #62	; 0x3e
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	e00b      	b.n	8006ee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fa ff0e 	bl	8001d2e <HAL_PCD_SetAddress>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f861 	bl	8006fe0 <USBD_Get_USB_Status>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	460b      	mov	r3, r1
 8006f3a:	72fb      	strb	r3, [r7, #11]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f4e:	893b      	ldrh	r3, [r7, #8]
 8006f50:	7af9      	ldrb	r1, [r7, #11]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f7fb f824 	bl	8001fa0 <HAL_PCD_EP_Transmit>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f83e 	bl	8006fe0 <USBD_Get_USB_Status>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f68:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	460b      	mov	r3, r1
 8006f80:	72fb      	strb	r3, [r7, #11]
 8006f82:	4613      	mov	r3, r2
 8006f84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	7af9      	ldrb	r1, [r7, #11]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	f7fa ff9f 	bl	8001edc <HAL_PCD_EP_Receive>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f81b 	bl	8006fe0 <USBD_Get_USB_Status>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fae:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fa ffcf 	bl	8001f72 <HAL_PCD_EP_GetRxCount>
 8006fd4:	4603      	mov	r3, r0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d817      	bhi.n	8007024 <USBD_Get_USB_Status+0x44>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <USBD_Get_USB_Status+0x1c>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	08007013 	.word	0x08007013
 8007004:	08007019 	.word	0x08007019
 8007008:	0800701f 	.word	0x0800701f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
    break;
 8007010:	e00b      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007012:	2302      	movs	r3, #2
 8007014:	73fb      	strb	r3, [r7, #15]
    break;
 8007016:	e008      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
    break;
 800701c:	e005      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800701e:	2302      	movs	r3, #2
 8007020:	73fb      	strb	r3, [r7, #15]
    break;
 8007022:	e002      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007024:	2302      	movs	r3, #2
 8007026:	73fb      	strb	r3, [r7, #15]
    break;
 8007028:	bf00      	nop
  }
  return usb_status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop

08007038 <__errno>:
 8007038:	4b01      	ldr	r3, [pc, #4]	; (8007040 <__errno+0x8>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000184 	.word	0x20000184

08007044 <__libc_init_array>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	2500      	movs	r5, #0
 8007048:	4e0c      	ldr	r6, [pc, #48]	; (800707c <__libc_init_array+0x38>)
 800704a:	4c0d      	ldr	r4, [pc, #52]	; (8007080 <__libc_init_array+0x3c>)
 800704c:	1ba4      	subs	r4, r4, r6
 800704e:	10a4      	asrs	r4, r4, #2
 8007050:	42a5      	cmp	r5, r4
 8007052:	d109      	bne.n	8007068 <__libc_init_array+0x24>
 8007054:	f000 fc98 	bl	8007988 <_init>
 8007058:	2500      	movs	r5, #0
 800705a:	4e0a      	ldr	r6, [pc, #40]	; (8007084 <__libc_init_array+0x40>)
 800705c:	4c0a      	ldr	r4, [pc, #40]	; (8007088 <__libc_init_array+0x44>)
 800705e:	1ba4      	subs	r4, r4, r6
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	42a5      	cmp	r5, r4
 8007064:	d105      	bne.n	8007072 <__libc_init_array+0x2e>
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800706c:	4798      	blx	r3
 800706e:	3501      	adds	r5, #1
 8007070:	e7ee      	b.n	8007050 <__libc_init_array+0xc>
 8007072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007076:	4798      	blx	r3
 8007078:	3501      	adds	r5, #1
 800707a:	e7f2      	b.n	8007062 <__libc_init_array+0x1e>
 800707c:	08007a70 	.word	0x08007a70
 8007080:	08007a70 	.word	0x08007a70
 8007084:	08007a70 	.word	0x08007a70
 8007088:	08007a74 	.word	0x08007a74

0800708c <malloc>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <malloc+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f000 b85f 	b.w	8007154 <_malloc_r>
 8007096:	bf00      	nop
 8007098:	20000184 	.word	0x20000184

0800709c <free>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <free+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b80b 	b.w	80070bc <_free_r>
 80070a6:	bf00      	nop
 80070a8:	20000184 	.word	0x20000184

080070ac <memset>:
 80070ac:	4603      	mov	r3, r0
 80070ae:	4402      	add	r2, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <_free_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4605      	mov	r5, r0
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d043      	beq.n	800714c <_free_r+0x90>
 80070c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c8:	1f0c      	subs	r4, r1, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bfb8      	it	lt
 80070ce:	18e4      	addlt	r4, r4, r3
 80070d0:	f000 fbac 	bl	800782c <__malloc_lock>
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <_free_r+0x94>)
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	4610      	mov	r0, r2
 80070da:	b933      	cbnz	r3, 80070ea <_free_r+0x2e>
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	6014      	str	r4, [r2, #0]
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e6:	f000 bba2 	b.w	800782e <__malloc_unlock>
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	d90b      	bls.n	8007106 <_free_r+0x4a>
 80070ee:	6821      	ldr	r1, [r4, #0]
 80070f0:	1862      	adds	r2, r4, r1
 80070f2:	4293      	cmp	r3, r2
 80070f4:	bf01      	itttt	eq
 80070f6:	681a      	ldreq	r2, [r3, #0]
 80070f8:	685b      	ldreq	r3, [r3, #4]
 80070fa:	1852      	addeq	r2, r2, r1
 80070fc:	6022      	streq	r2, [r4, #0]
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	6004      	str	r4, [r0, #0]
 8007102:	e7ed      	b.n	80070e0 <_free_r+0x24>
 8007104:	4613      	mov	r3, r2
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	b10a      	cbz	r2, 800710e <_free_r+0x52>
 800710a:	42a2      	cmp	r2, r4
 800710c:	d9fa      	bls.n	8007104 <_free_r+0x48>
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	1858      	adds	r0, r3, r1
 8007112:	42a0      	cmp	r0, r4
 8007114:	d10b      	bne.n	800712e <_free_r+0x72>
 8007116:	6820      	ldr	r0, [r4, #0]
 8007118:	4401      	add	r1, r0
 800711a:	1858      	adds	r0, r3, r1
 800711c:	4282      	cmp	r2, r0
 800711e:	6019      	str	r1, [r3, #0]
 8007120:	d1de      	bne.n	80070e0 <_free_r+0x24>
 8007122:	6810      	ldr	r0, [r2, #0]
 8007124:	6852      	ldr	r2, [r2, #4]
 8007126:	4401      	add	r1, r0
 8007128:	6019      	str	r1, [r3, #0]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	e7d8      	b.n	80070e0 <_free_r+0x24>
 800712e:	d902      	bls.n	8007136 <_free_r+0x7a>
 8007130:	230c      	movs	r3, #12
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	e7d4      	b.n	80070e0 <_free_r+0x24>
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	1821      	adds	r1, r4, r0
 800713a:	428a      	cmp	r2, r1
 800713c:	bf01      	itttt	eq
 800713e:	6811      	ldreq	r1, [r2, #0]
 8007140:	6852      	ldreq	r2, [r2, #4]
 8007142:	1809      	addeq	r1, r1, r0
 8007144:	6021      	streq	r1, [r4, #0]
 8007146:	6062      	str	r2, [r4, #4]
 8007148:	605c      	str	r4, [r3, #4]
 800714a:	e7c9      	b.n	80070e0 <_free_r+0x24>
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop
 8007150:	20000238 	.word	0x20000238

08007154 <_malloc_r>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	1ccd      	adds	r5, r1, #3
 8007158:	f025 0503 	bic.w	r5, r5, #3
 800715c:	3508      	adds	r5, #8
 800715e:	2d0c      	cmp	r5, #12
 8007160:	bf38      	it	cc
 8007162:	250c      	movcc	r5, #12
 8007164:	2d00      	cmp	r5, #0
 8007166:	4606      	mov	r6, r0
 8007168:	db01      	blt.n	800716e <_malloc_r+0x1a>
 800716a:	42a9      	cmp	r1, r5
 800716c:	d903      	bls.n	8007176 <_malloc_r+0x22>
 800716e:	230c      	movs	r3, #12
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	2000      	movs	r0, #0
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	f000 fb59 	bl	800782c <__malloc_lock>
 800717a:	4a21      	ldr	r2, [pc, #132]	; (8007200 <_malloc_r+0xac>)
 800717c:	6814      	ldr	r4, [r2, #0]
 800717e:	4621      	mov	r1, r4
 8007180:	b991      	cbnz	r1, 80071a8 <_malloc_r+0x54>
 8007182:	4c20      	ldr	r4, [pc, #128]	; (8007204 <_malloc_r+0xb0>)
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	b91b      	cbnz	r3, 8007190 <_malloc_r+0x3c>
 8007188:	4630      	mov	r0, r6
 800718a:	f000 f8a1 	bl	80072d0 <_sbrk_r>
 800718e:	6020      	str	r0, [r4, #0]
 8007190:	4629      	mov	r1, r5
 8007192:	4630      	mov	r0, r6
 8007194:	f000 f89c 	bl	80072d0 <_sbrk_r>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d124      	bne.n	80071e6 <_malloc_r+0x92>
 800719c:	230c      	movs	r3, #12
 800719e:	4630      	mov	r0, r6
 80071a0:	6033      	str	r3, [r6, #0]
 80071a2:	f000 fb44 	bl	800782e <__malloc_unlock>
 80071a6:	e7e4      	b.n	8007172 <_malloc_r+0x1e>
 80071a8:	680b      	ldr	r3, [r1, #0]
 80071aa:	1b5b      	subs	r3, r3, r5
 80071ac:	d418      	bmi.n	80071e0 <_malloc_r+0x8c>
 80071ae:	2b0b      	cmp	r3, #11
 80071b0:	d90f      	bls.n	80071d2 <_malloc_r+0x7e>
 80071b2:	600b      	str	r3, [r1, #0]
 80071b4:	18cc      	adds	r4, r1, r3
 80071b6:	50cd      	str	r5, [r1, r3]
 80071b8:	4630      	mov	r0, r6
 80071ba:	f000 fb38 	bl	800782e <__malloc_unlock>
 80071be:	f104 000b 	add.w	r0, r4, #11
 80071c2:	1d23      	adds	r3, r4, #4
 80071c4:	f020 0007 	bic.w	r0, r0, #7
 80071c8:	1ac3      	subs	r3, r0, r3
 80071ca:	d0d3      	beq.n	8007174 <_malloc_r+0x20>
 80071cc:	425a      	negs	r2, r3
 80071ce:	50e2      	str	r2, [r4, r3]
 80071d0:	e7d0      	b.n	8007174 <_malloc_r+0x20>
 80071d2:	684b      	ldr	r3, [r1, #4]
 80071d4:	428c      	cmp	r4, r1
 80071d6:	bf16      	itet	ne
 80071d8:	6063      	strne	r3, [r4, #4]
 80071da:	6013      	streq	r3, [r2, #0]
 80071dc:	460c      	movne	r4, r1
 80071de:	e7eb      	b.n	80071b8 <_malloc_r+0x64>
 80071e0:	460c      	mov	r4, r1
 80071e2:	6849      	ldr	r1, [r1, #4]
 80071e4:	e7cc      	b.n	8007180 <_malloc_r+0x2c>
 80071e6:	1cc4      	adds	r4, r0, #3
 80071e8:	f024 0403 	bic.w	r4, r4, #3
 80071ec:	42a0      	cmp	r0, r4
 80071ee:	d005      	beq.n	80071fc <_malloc_r+0xa8>
 80071f0:	1a21      	subs	r1, r4, r0
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 f86c 	bl	80072d0 <_sbrk_r>
 80071f8:	3001      	adds	r0, #1
 80071fa:	d0cf      	beq.n	800719c <_malloc_r+0x48>
 80071fc:	6025      	str	r5, [r4, #0]
 80071fe:	e7db      	b.n	80071b8 <_malloc_r+0x64>
 8007200:	20000238 	.word	0x20000238
 8007204:	2000023c 	.word	0x2000023c

08007208 <_puts_r>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	460e      	mov	r6, r1
 800720c:	4605      	mov	r5, r0
 800720e:	b118      	cbz	r0, 8007218 <_puts_r+0x10>
 8007210:	6983      	ldr	r3, [r0, #24]
 8007212:	b90b      	cbnz	r3, 8007218 <_puts_r+0x10>
 8007214:	f000 fa1c 	bl	8007650 <__sinit>
 8007218:	69ab      	ldr	r3, [r5, #24]
 800721a:	68ac      	ldr	r4, [r5, #8]
 800721c:	b913      	cbnz	r3, 8007224 <_puts_r+0x1c>
 800721e:	4628      	mov	r0, r5
 8007220:	f000 fa16 	bl	8007650 <__sinit>
 8007224:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <_puts_r+0xac>)
 8007226:	429c      	cmp	r4, r3
 8007228:	d117      	bne.n	800725a <_puts_r+0x52>
 800722a:	686c      	ldr	r4, [r5, #4]
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	071b      	lsls	r3, r3, #28
 8007230:	d51d      	bpl.n	800726e <_puts_r+0x66>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	b1db      	cbz	r3, 800726e <_puts_r+0x66>
 8007236:	3e01      	subs	r6, #1
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800723e:	3b01      	subs	r3, #1
 8007240:	60a3      	str	r3, [r4, #8]
 8007242:	b9e9      	cbnz	r1, 8007280 <_puts_r+0x78>
 8007244:	2b00      	cmp	r3, #0
 8007246:	da2e      	bge.n	80072a6 <_puts_r+0x9e>
 8007248:	4622      	mov	r2, r4
 800724a:	210a      	movs	r1, #10
 800724c:	4628      	mov	r0, r5
 800724e:	f000 f84f 	bl	80072f0 <__swbuf_r>
 8007252:	3001      	adds	r0, #1
 8007254:	d011      	beq.n	800727a <_puts_r+0x72>
 8007256:	200a      	movs	r0, #10
 8007258:	e011      	b.n	800727e <_puts_r+0x76>
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <_puts_r+0xb0>)
 800725c:	429c      	cmp	r4, r3
 800725e:	d101      	bne.n	8007264 <_puts_r+0x5c>
 8007260:	68ac      	ldr	r4, [r5, #8]
 8007262:	e7e3      	b.n	800722c <_puts_r+0x24>
 8007264:	4b15      	ldr	r3, [pc, #84]	; (80072bc <_puts_r+0xb4>)
 8007266:	429c      	cmp	r4, r3
 8007268:	bf08      	it	eq
 800726a:	68ec      	ldreq	r4, [r5, #12]
 800726c:	e7de      	b.n	800722c <_puts_r+0x24>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f88f 	bl	8007394 <__swsetup_r>
 8007276:	2800      	cmp	r0, #0
 8007278:	d0dd      	beq.n	8007236 <_puts_r+0x2e>
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	2b00      	cmp	r3, #0
 8007282:	da04      	bge.n	800728e <_puts_r+0x86>
 8007284:	69a2      	ldr	r2, [r4, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	dc06      	bgt.n	8007298 <_puts_r+0x90>
 800728a:	290a      	cmp	r1, #10
 800728c:	d004      	beq.n	8007298 <_puts_r+0x90>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	7019      	strb	r1, [r3, #0]
 8007296:	e7cf      	b.n	8007238 <_puts_r+0x30>
 8007298:	4622      	mov	r2, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f828 	bl	80072f0 <__swbuf_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1c9      	bne.n	8007238 <_puts_r+0x30>
 80072a4:	e7e9      	b.n	800727a <_puts_r+0x72>
 80072a6:	200a      	movs	r0, #10
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	7018      	strb	r0, [r3, #0]
 80072b0:	e7e5      	b.n	800727e <_puts_r+0x76>
 80072b2:	bf00      	nop
 80072b4:	08007a28 	.word	0x08007a28
 80072b8:	08007a48 	.word	0x08007a48
 80072bc:	08007a08 	.word	0x08007a08

080072c0 <puts>:
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <puts+0xc>)
 80072c2:	4601      	mov	r1, r0
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	f7ff bf9f 	b.w	8007208 <_puts_r>
 80072ca:	bf00      	nop
 80072cc:	20000184 	.word	0x20000184

080072d0 <_sbrk_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	2300      	movs	r3, #0
 80072d4:	4c05      	ldr	r4, [pc, #20]	; (80072ec <_sbrk_r+0x1c>)
 80072d6:	4605      	mov	r5, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	f7f9 fbce 	bl	8000a7c <_sbrk>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_sbrk_r+0x1a>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_sbrk_r+0x1a>
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20001f50 	.word	0x20001f50

080072f0 <__swbuf_r>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	460e      	mov	r6, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	4605      	mov	r5, r0
 80072f8:	b118      	cbz	r0, 8007302 <__swbuf_r+0x12>
 80072fa:	6983      	ldr	r3, [r0, #24]
 80072fc:	b90b      	cbnz	r3, 8007302 <__swbuf_r+0x12>
 80072fe:	f000 f9a7 	bl	8007650 <__sinit>
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <__swbuf_r+0x98>)
 8007304:	429c      	cmp	r4, r3
 8007306:	d12a      	bne.n	800735e <__swbuf_r+0x6e>
 8007308:	686c      	ldr	r4, [r5, #4]
 800730a:	69a3      	ldr	r3, [r4, #24]
 800730c:	60a3      	str	r3, [r4, #8]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	071a      	lsls	r2, r3, #28
 8007312:	d52e      	bpl.n	8007372 <__swbuf_r+0x82>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	b363      	cbz	r3, 8007372 <__swbuf_r+0x82>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	6820      	ldr	r0, [r4, #0]
 800731c:	b2f6      	uxtb	r6, r6
 800731e:	1ac0      	subs	r0, r0, r3
 8007320:	6963      	ldr	r3, [r4, #20]
 8007322:	4637      	mov	r7, r6
 8007324:	4283      	cmp	r3, r0
 8007326:	dc04      	bgt.n	8007332 <__swbuf_r+0x42>
 8007328:	4621      	mov	r1, r4
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f926 	bl	800757c <_fflush_r>
 8007330:	bb28      	cbnz	r0, 800737e <__swbuf_r+0x8e>
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	3001      	adds	r0, #1
 8007336:	3b01      	subs	r3, #1
 8007338:	60a3      	str	r3, [r4, #8]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	701e      	strb	r6, [r3, #0]
 8007342:	6963      	ldr	r3, [r4, #20]
 8007344:	4283      	cmp	r3, r0
 8007346:	d004      	beq.n	8007352 <__swbuf_r+0x62>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	07db      	lsls	r3, r3, #31
 800734c:	d519      	bpl.n	8007382 <__swbuf_r+0x92>
 800734e:	2e0a      	cmp	r6, #10
 8007350:	d117      	bne.n	8007382 <__swbuf_r+0x92>
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f911 	bl	800757c <_fflush_r>
 800735a:	b190      	cbz	r0, 8007382 <__swbuf_r+0x92>
 800735c:	e00f      	b.n	800737e <__swbuf_r+0x8e>
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <__swbuf_r+0x9c>)
 8007360:	429c      	cmp	r4, r3
 8007362:	d101      	bne.n	8007368 <__swbuf_r+0x78>
 8007364:	68ac      	ldr	r4, [r5, #8]
 8007366:	e7d0      	b.n	800730a <__swbuf_r+0x1a>
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <__swbuf_r+0xa0>)
 800736a:	429c      	cmp	r4, r3
 800736c:	bf08      	it	eq
 800736e:	68ec      	ldreq	r4, [r5, #12]
 8007370:	e7cb      	b.n	800730a <__swbuf_r+0x1a>
 8007372:	4621      	mov	r1, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f80d 	bl	8007394 <__swsetup_r>
 800737a:	2800      	cmp	r0, #0
 800737c:	d0cc      	beq.n	8007318 <__swbuf_r+0x28>
 800737e:	f04f 37ff 	mov.w	r7, #4294967295
 8007382:	4638      	mov	r0, r7
 8007384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007386:	bf00      	nop
 8007388:	08007a28 	.word	0x08007a28
 800738c:	08007a48 	.word	0x08007a48
 8007390:	08007a08 	.word	0x08007a08

08007394 <__swsetup_r>:
 8007394:	4b32      	ldr	r3, [pc, #200]	; (8007460 <__swsetup_r+0xcc>)
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	681d      	ldr	r5, [r3, #0]
 800739a:	4606      	mov	r6, r0
 800739c:	460c      	mov	r4, r1
 800739e:	b125      	cbz	r5, 80073aa <__swsetup_r+0x16>
 80073a0:	69ab      	ldr	r3, [r5, #24]
 80073a2:	b913      	cbnz	r3, 80073aa <__swsetup_r+0x16>
 80073a4:	4628      	mov	r0, r5
 80073a6:	f000 f953 	bl	8007650 <__sinit>
 80073aa:	4b2e      	ldr	r3, [pc, #184]	; (8007464 <__swsetup_r+0xd0>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	d10f      	bne.n	80073d0 <__swsetup_r+0x3c>
 80073b0:	686c      	ldr	r4, [r5, #4]
 80073b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	0715      	lsls	r5, r2, #28
 80073ba:	d42c      	bmi.n	8007416 <__swsetup_r+0x82>
 80073bc:	06d0      	lsls	r0, r2, #27
 80073be:	d411      	bmi.n	80073e4 <__swsetup_r+0x50>
 80073c0:	2209      	movs	r2, #9
 80073c2:	6032      	str	r2, [r6, #0]
 80073c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	e03e      	b.n	800744e <__swsetup_r+0xba>
 80073d0:	4b25      	ldr	r3, [pc, #148]	; (8007468 <__swsetup_r+0xd4>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d101      	bne.n	80073da <__swsetup_r+0x46>
 80073d6:	68ac      	ldr	r4, [r5, #8]
 80073d8:	e7eb      	b.n	80073b2 <__swsetup_r+0x1e>
 80073da:	4b24      	ldr	r3, [pc, #144]	; (800746c <__swsetup_r+0xd8>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	bf08      	it	eq
 80073e0:	68ec      	ldreq	r4, [r5, #12]
 80073e2:	e7e6      	b.n	80073b2 <__swsetup_r+0x1e>
 80073e4:	0751      	lsls	r1, r2, #29
 80073e6:	d512      	bpl.n	800740e <__swsetup_r+0x7a>
 80073e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ea:	b141      	cbz	r1, 80073fe <__swsetup_r+0x6a>
 80073ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d002      	beq.n	80073fa <__swsetup_r+0x66>
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff fe61 	bl	80070bc <_free_r>
 80073fa:	2300      	movs	r3, #0
 80073fc:	6363      	str	r3, [r4, #52]	; 0x34
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	2300      	movs	r3, #0
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	f043 0308 	orr.w	r3, r3, #8
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	b94b      	cbnz	r3, 800742e <__swsetup_r+0x9a>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007424:	d003      	beq.n	800742e <__swsetup_r+0x9a>
 8007426:	4621      	mov	r1, r4
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f9bf 	bl	80077ac <__smakebuf_r>
 800742e:	89a2      	ldrh	r2, [r4, #12]
 8007430:	f012 0301 	ands.w	r3, r2, #1
 8007434:	d00c      	beq.n	8007450 <__swsetup_r+0xbc>
 8007436:	2300      	movs	r3, #0
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	6963      	ldr	r3, [r4, #20]
 800743c:	425b      	negs	r3, r3
 800743e:	61a3      	str	r3, [r4, #24]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b953      	cbnz	r3, 800745a <__swsetup_r+0xc6>
 8007444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007448:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800744c:	d1ba      	bne.n	80073c4 <__swsetup_r+0x30>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	0792      	lsls	r2, r2, #30
 8007452:	bf58      	it	pl
 8007454:	6963      	ldrpl	r3, [r4, #20]
 8007456:	60a3      	str	r3, [r4, #8]
 8007458:	e7f2      	b.n	8007440 <__swsetup_r+0xac>
 800745a:	2000      	movs	r0, #0
 800745c:	e7f7      	b.n	800744e <__swsetup_r+0xba>
 800745e:	bf00      	nop
 8007460:	20000184 	.word	0x20000184
 8007464:	08007a28 	.word	0x08007a28
 8007468:	08007a48 	.word	0x08007a48
 800746c:	08007a08 	.word	0x08007a08

08007470 <__sflush_r>:
 8007470:	898a      	ldrh	r2, [r1, #12]
 8007472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007476:	4605      	mov	r5, r0
 8007478:	0710      	lsls	r0, r2, #28
 800747a:	460c      	mov	r4, r1
 800747c:	d458      	bmi.n	8007530 <__sflush_r+0xc0>
 800747e:	684b      	ldr	r3, [r1, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	dc05      	bgt.n	8007490 <__sflush_r+0x20>
 8007484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	dc02      	bgt.n	8007490 <__sflush_r+0x20>
 800748a:	2000      	movs	r0, #0
 800748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007492:	2e00      	cmp	r6, #0
 8007494:	d0f9      	beq.n	800748a <__sflush_r+0x1a>
 8007496:	2300      	movs	r3, #0
 8007498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800749c:	682f      	ldr	r7, [r5, #0]
 800749e:	6a21      	ldr	r1, [r4, #32]
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	d032      	beq.n	800750a <__sflush_r+0x9a>
 80074a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	075a      	lsls	r2, r3, #29
 80074aa:	d505      	bpl.n	80074b8 <__sflush_r+0x48>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	1ac0      	subs	r0, r0, r3
 80074b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074b2:	b10b      	cbz	r3, 80074b8 <__sflush_r+0x48>
 80074b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074b6:	1ac0      	subs	r0, r0, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	4602      	mov	r2, r0
 80074bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074be:	6a21      	ldr	r1, [r4, #32]
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b0      	blx	r6
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	d106      	bne.n	80074d8 <__sflush_r+0x68>
 80074ca:	6829      	ldr	r1, [r5, #0]
 80074cc:	291d      	cmp	r1, #29
 80074ce:	d848      	bhi.n	8007562 <__sflush_r+0xf2>
 80074d0:	4a29      	ldr	r2, [pc, #164]	; (8007578 <__sflush_r+0x108>)
 80074d2:	40ca      	lsrs	r2, r1
 80074d4:	07d6      	lsls	r6, r2, #31
 80074d6:	d544      	bpl.n	8007562 <__sflush_r+0xf2>
 80074d8:	2200      	movs	r2, #0
 80074da:	6062      	str	r2, [r4, #4]
 80074dc:	6922      	ldr	r2, [r4, #16]
 80074de:	04d9      	lsls	r1, r3, #19
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	d504      	bpl.n	80074ee <__sflush_r+0x7e>
 80074e4:	1c42      	adds	r2, r0, #1
 80074e6:	d101      	bne.n	80074ec <__sflush_r+0x7c>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b903      	cbnz	r3, 80074ee <__sflush_r+0x7e>
 80074ec:	6560      	str	r0, [r4, #84]	; 0x54
 80074ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074f0:	602f      	str	r7, [r5, #0]
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d0c9      	beq.n	800748a <__sflush_r+0x1a>
 80074f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074fa:	4299      	cmp	r1, r3
 80074fc:	d002      	beq.n	8007504 <__sflush_r+0x94>
 80074fe:	4628      	mov	r0, r5
 8007500:	f7ff fddc 	bl	80070bc <_free_r>
 8007504:	2000      	movs	r0, #0
 8007506:	6360      	str	r0, [r4, #52]	; 0x34
 8007508:	e7c0      	b.n	800748c <__sflush_r+0x1c>
 800750a:	2301      	movs	r3, #1
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	1c41      	adds	r1, r0, #1
 8007512:	d1c8      	bne.n	80074a6 <__sflush_r+0x36>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0c5      	beq.n	80074a6 <__sflush_r+0x36>
 800751a:	2b1d      	cmp	r3, #29
 800751c:	d001      	beq.n	8007522 <__sflush_r+0xb2>
 800751e:	2b16      	cmp	r3, #22
 8007520:	d101      	bne.n	8007526 <__sflush_r+0xb6>
 8007522:	602f      	str	r7, [r5, #0]
 8007524:	e7b1      	b.n	800748a <__sflush_r+0x1a>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	e7ad      	b.n	800748c <__sflush_r+0x1c>
 8007530:	690f      	ldr	r7, [r1, #16]
 8007532:	2f00      	cmp	r7, #0
 8007534:	d0a9      	beq.n	800748a <__sflush_r+0x1a>
 8007536:	0793      	lsls	r3, r2, #30
 8007538:	bf18      	it	ne
 800753a:	2300      	movne	r3, #0
 800753c:	680e      	ldr	r6, [r1, #0]
 800753e:	bf08      	it	eq
 8007540:	694b      	ldreq	r3, [r1, #20]
 8007542:	eba6 0807 	sub.w	r8, r6, r7
 8007546:	600f      	str	r7, [r1, #0]
 8007548:	608b      	str	r3, [r1, #8]
 800754a:	f1b8 0f00 	cmp.w	r8, #0
 800754e:	dd9c      	ble.n	800748a <__sflush_r+0x1a>
 8007550:	4643      	mov	r3, r8
 8007552:	463a      	mov	r2, r7
 8007554:	6a21      	ldr	r1, [r4, #32]
 8007556:	4628      	mov	r0, r5
 8007558:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800755a:	47b0      	blx	r6
 800755c:	2800      	cmp	r0, #0
 800755e:	dc06      	bgt.n	800756e <__sflush_r+0xfe>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e78e      	b.n	800748c <__sflush_r+0x1c>
 800756e:	4407      	add	r7, r0
 8007570:	eba8 0800 	sub.w	r8, r8, r0
 8007574:	e7e9      	b.n	800754a <__sflush_r+0xda>
 8007576:	bf00      	nop
 8007578:	20400001 	.word	0x20400001

0800757c <_fflush_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	690b      	ldr	r3, [r1, #16]
 8007580:	4605      	mov	r5, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b1db      	cbz	r3, 80075be <_fflush_r+0x42>
 8007586:	b118      	cbz	r0, 8007590 <_fflush_r+0x14>
 8007588:	6983      	ldr	r3, [r0, #24]
 800758a:	b90b      	cbnz	r3, 8007590 <_fflush_r+0x14>
 800758c:	f000 f860 	bl	8007650 <__sinit>
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <_fflush_r+0x48>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d109      	bne.n	80075aa <_fflush_r+0x2e>
 8007596:	686c      	ldr	r4, [r5, #4]
 8007598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759c:	b17b      	cbz	r3, 80075be <_fflush_r+0x42>
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a6:	f7ff bf63 	b.w	8007470 <__sflush_r>
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <_fflush_r+0x4c>)
 80075ac:	429c      	cmp	r4, r3
 80075ae:	d101      	bne.n	80075b4 <_fflush_r+0x38>
 80075b0:	68ac      	ldr	r4, [r5, #8]
 80075b2:	e7f1      	b.n	8007598 <_fflush_r+0x1c>
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <_fflush_r+0x50>)
 80075b6:	429c      	cmp	r4, r3
 80075b8:	bf08      	it	eq
 80075ba:	68ec      	ldreq	r4, [r5, #12]
 80075bc:	e7ec      	b.n	8007598 <_fflush_r+0x1c>
 80075be:	2000      	movs	r0, #0
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	bf00      	nop
 80075c4:	08007a28 	.word	0x08007a28
 80075c8:	08007a48 	.word	0x08007a48
 80075cc:	08007a08 	.word	0x08007a08

080075d0 <std>:
 80075d0:	2300      	movs	r3, #0
 80075d2:	b510      	push	{r4, lr}
 80075d4:	4604      	mov	r4, r0
 80075d6:	e9c0 3300 	strd	r3, r3, [r0]
 80075da:	6083      	str	r3, [r0, #8]
 80075dc:	8181      	strh	r1, [r0, #12]
 80075de:	6643      	str	r3, [r0, #100]	; 0x64
 80075e0:	81c2      	strh	r2, [r0, #14]
 80075e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075e6:	6183      	str	r3, [r0, #24]
 80075e8:	4619      	mov	r1, r3
 80075ea:	2208      	movs	r2, #8
 80075ec:	305c      	adds	r0, #92	; 0x5c
 80075ee:	f7ff fd5d 	bl	80070ac <memset>
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x38>)
 80075f4:	6224      	str	r4, [r4, #32]
 80075f6:	6263      	str	r3, [r4, #36]	; 0x24
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <std+0x3c>)
 80075fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <std+0x40>)
 80075fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <std+0x44>)
 8007602:	6323      	str	r3, [r4, #48]	; 0x30
 8007604:	bd10      	pop	{r4, pc}
 8007606:	bf00      	nop
 8007608:	08007831 	.word	0x08007831
 800760c:	08007853 	.word	0x08007853
 8007610:	0800788b 	.word	0x0800788b
 8007614:	080078af 	.word	0x080078af

08007618 <_cleanup_r>:
 8007618:	4901      	ldr	r1, [pc, #4]	; (8007620 <_cleanup_r+0x8>)
 800761a:	f000 b885 	b.w	8007728 <_fwalk_reent>
 800761e:	bf00      	nop
 8007620:	0800757d 	.word	0x0800757d

08007624 <__sfmoreglue>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	2568      	movs	r5, #104	; 0x68
 8007628:	1e4a      	subs	r2, r1, #1
 800762a:	4355      	muls	r5, r2
 800762c:	460e      	mov	r6, r1
 800762e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007632:	f7ff fd8f 	bl	8007154 <_malloc_r>
 8007636:	4604      	mov	r4, r0
 8007638:	b140      	cbz	r0, 800764c <__sfmoreglue+0x28>
 800763a:	2100      	movs	r1, #0
 800763c:	e9c0 1600 	strd	r1, r6, [r0]
 8007640:	300c      	adds	r0, #12
 8007642:	60a0      	str	r0, [r4, #8]
 8007644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007648:	f7ff fd30 	bl	80070ac <memset>
 800764c:	4620      	mov	r0, r4
 800764e:	bd70      	pop	{r4, r5, r6, pc}

08007650 <__sinit>:
 8007650:	6983      	ldr	r3, [r0, #24]
 8007652:	b510      	push	{r4, lr}
 8007654:	4604      	mov	r4, r0
 8007656:	bb33      	cbnz	r3, 80076a6 <__sinit+0x56>
 8007658:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800765c:	6503      	str	r3, [r0, #80]	; 0x50
 800765e:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <__sinit+0x58>)
 8007660:	4a12      	ldr	r2, [pc, #72]	; (80076ac <__sinit+0x5c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6282      	str	r2, [r0, #40]	; 0x28
 8007666:	4298      	cmp	r0, r3
 8007668:	bf04      	itt	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	6183      	streq	r3, [r0, #24]
 800766e:	f000 f81f 	bl	80076b0 <__sfp>
 8007672:	6060      	str	r0, [r4, #4]
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f81b 	bl	80076b0 <__sfp>
 800767a:	60a0      	str	r0, [r4, #8]
 800767c:	4620      	mov	r0, r4
 800767e:	f000 f817 	bl	80076b0 <__sfp>
 8007682:	2200      	movs	r2, #0
 8007684:	60e0      	str	r0, [r4, #12]
 8007686:	2104      	movs	r1, #4
 8007688:	6860      	ldr	r0, [r4, #4]
 800768a:	f7ff ffa1 	bl	80075d0 <std>
 800768e:	2201      	movs	r2, #1
 8007690:	2109      	movs	r1, #9
 8007692:	68a0      	ldr	r0, [r4, #8]
 8007694:	f7ff ff9c 	bl	80075d0 <std>
 8007698:	2202      	movs	r2, #2
 800769a:	2112      	movs	r1, #18
 800769c:	68e0      	ldr	r0, [r4, #12]
 800769e:	f7ff ff97 	bl	80075d0 <std>
 80076a2:	2301      	movs	r3, #1
 80076a4:	61a3      	str	r3, [r4, #24]
 80076a6:	bd10      	pop	{r4, pc}
 80076a8:	08007a04 	.word	0x08007a04
 80076ac:	08007619 	.word	0x08007619

080076b0 <__sfp>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <__sfp+0x70>)
 80076b4:	4607      	mov	r7, r0
 80076b6:	681e      	ldr	r6, [r3, #0]
 80076b8:	69b3      	ldr	r3, [r6, #24]
 80076ba:	b913      	cbnz	r3, 80076c2 <__sfp+0x12>
 80076bc:	4630      	mov	r0, r6
 80076be:	f7ff ffc7 	bl	8007650 <__sinit>
 80076c2:	3648      	adds	r6, #72	; 0x48
 80076c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	d503      	bpl.n	80076d4 <__sfp+0x24>
 80076cc:	6833      	ldr	r3, [r6, #0]
 80076ce:	b133      	cbz	r3, 80076de <__sfp+0x2e>
 80076d0:	6836      	ldr	r6, [r6, #0]
 80076d2:	e7f7      	b.n	80076c4 <__sfp+0x14>
 80076d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076d8:	b16d      	cbz	r5, 80076f6 <__sfp+0x46>
 80076da:	3468      	adds	r4, #104	; 0x68
 80076dc:	e7f4      	b.n	80076c8 <__sfp+0x18>
 80076de:	2104      	movs	r1, #4
 80076e0:	4638      	mov	r0, r7
 80076e2:	f7ff ff9f 	bl	8007624 <__sfmoreglue>
 80076e6:	6030      	str	r0, [r6, #0]
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d1f1      	bne.n	80076d0 <__sfp+0x20>
 80076ec:	230c      	movs	r3, #12
 80076ee:	4604      	mov	r4, r0
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4620      	mov	r0, r4
 80076f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <__sfp+0x74>)
 80076f8:	6665      	str	r5, [r4, #100]	; 0x64
 80076fa:	e9c4 5500 	strd	r5, r5, [r4]
 80076fe:	60a5      	str	r5, [r4, #8]
 8007700:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007704:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007708:	2208      	movs	r2, #8
 800770a:	4629      	mov	r1, r5
 800770c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007710:	f7ff fccc 	bl	80070ac <memset>
 8007714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800771c:	e7e9      	b.n	80076f2 <__sfp+0x42>
 800771e:	bf00      	nop
 8007720:	08007a04 	.word	0x08007a04
 8007724:	ffff0001 	.word	0xffff0001

08007728 <_fwalk_reent>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	2600      	movs	r6, #0
 8007732:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007736:	b914      	cbnz	r4, 800773e <_fwalk_reent+0x16>
 8007738:	4630      	mov	r0, r6
 800773a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007742:	3f01      	subs	r7, #1
 8007744:	d501      	bpl.n	800774a <_fwalk_reent+0x22>
 8007746:	6824      	ldr	r4, [r4, #0]
 8007748:	e7f5      	b.n	8007736 <_fwalk_reent+0xe>
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d907      	bls.n	8007760 <_fwalk_reent+0x38>
 8007750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007754:	3301      	adds	r3, #1
 8007756:	d003      	beq.n	8007760 <_fwalk_reent+0x38>
 8007758:	4629      	mov	r1, r5
 800775a:	4640      	mov	r0, r8
 800775c:	47c8      	blx	r9
 800775e:	4306      	orrs	r6, r0
 8007760:	3568      	adds	r5, #104	; 0x68
 8007762:	e7ee      	b.n	8007742 <_fwalk_reent+0x1a>

08007764 <__swhatbuf_r>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	460e      	mov	r6, r1
 8007768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776c:	b096      	sub	sp, #88	; 0x58
 800776e:	2900      	cmp	r1, #0
 8007770:	4614      	mov	r4, r2
 8007772:	461d      	mov	r5, r3
 8007774:	da07      	bge.n	8007786 <__swhatbuf_r+0x22>
 8007776:	2300      	movs	r3, #0
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	89b3      	ldrh	r3, [r6, #12]
 800777c:	061a      	lsls	r2, r3, #24
 800777e:	d410      	bmi.n	80077a2 <__swhatbuf_r+0x3e>
 8007780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007784:	e00e      	b.n	80077a4 <__swhatbuf_r+0x40>
 8007786:	466a      	mov	r2, sp
 8007788:	f000 f8b8 	bl	80078fc <_fstat_r>
 800778c:	2800      	cmp	r0, #0
 800778e:	dbf2      	blt.n	8007776 <__swhatbuf_r+0x12>
 8007790:	9a01      	ldr	r2, [sp, #4]
 8007792:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007796:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800779a:	425a      	negs	r2, r3
 800779c:	415a      	adcs	r2, r3
 800779e:	602a      	str	r2, [r5, #0]
 80077a0:	e7ee      	b.n	8007780 <__swhatbuf_r+0x1c>
 80077a2:	2340      	movs	r3, #64	; 0x40
 80077a4:	2000      	movs	r0, #0
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	b016      	add	sp, #88	; 0x58
 80077aa:	bd70      	pop	{r4, r5, r6, pc}

080077ac <__smakebuf_r>:
 80077ac:	898b      	ldrh	r3, [r1, #12]
 80077ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077b0:	079d      	lsls	r5, r3, #30
 80077b2:	4606      	mov	r6, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	d507      	bpl.n	80077c8 <__smakebuf_r+0x1c>
 80077b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	2301      	movs	r3, #1
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	b002      	add	sp, #8
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	ab01      	add	r3, sp, #4
 80077ca:	466a      	mov	r2, sp
 80077cc:	f7ff ffca 	bl	8007764 <__swhatbuf_r>
 80077d0:	9900      	ldr	r1, [sp, #0]
 80077d2:	4605      	mov	r5, r0
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff fcbd 	bl	8007154 <_malloc_r>
 80077da:	b948      	cbnz	r0, 80077f0 <__smakebuf_r+0x44>
 80077dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e0:	059a      	lsls	r2, r3, #22
 80077e2:	d4ef      	bmi.n	80077c4 <__smakebuf_r+0x18>
 80077e4:	f023 0303 	bic.w	r3, r3, #3
 80077e8:	f043 0302 	orr.w	r3, r3, #2
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	e7e3      	b.n	80077b8 <__smakebuf_r+0xc>
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <__smakebuf_r+0x7c>)
 80077f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	6020      	str	r0, [r4, #0]
 80077f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	9b00      	ldr	r3, [sp, #0]
 8007800:	6120      	str	r0, [r4, #16]
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	9b01      	ldr	r3, [sp, #4]
 8007806:	b15b      	cbz	r3, 8007820 <__smakebuf_r+0x74>
 8007808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800780c:	4630      	mov	r0, r6
 800780e:	f000 f887 	bl	8007920 <_isatty_r>
 8007812:	b128      	cbz	r0, 8007820 <__smakebuf_r+0x74>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f023 0303 	bic.w	r3, r3, #3
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	431d      	orrs	r5, r3
 8007824:	81a5      	strh	r5, [r4, #12]
 8007826:	e7cd      	b.n	80077c4 <__smakebuf_r+0x18>
 8007828:	08007619 	.word	0x08007619

0800782c <__malloc_lock>:
 800782c:	4770      	bx	lr

0800782e <__malloc_unlock>:
 800782e:	4770      	bx	lr

08007830 <__sread>:
 8007830:	b510      	push	{r4, lr}
 8007832:	460c      	mov	r4, r1
 8007834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007838:	f000 f894 	bl	8007964 <_read_r>
 800783c:	2800      	cmp	r0, #0
 800783e:	bfab      	itete	ge
 8007840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007842:	89a3      	ldrhlt	r3, [r4, #12]
 8007844:	181b      	addge	r3, r3, r0
 8007846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800784a:	bfac      	ite	ge
 800784c:	6563      	strge	r3, [r4, #84]	; 0x54
 800784e:	81a3      	strhlt	r3, [r4, #12]
 8007850:	bd10      	pop	{r4, pc}

08007852 <__swrite>:
 8007852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007856:	461f      	mov	r7, r3
 8007858:	898b      	ldrh	r3, [r1, #12]
 800785a:	4605      	mov	r5, r0
 800785c:	05db      	lsls	r3, r3, #23
 800785e:	460c      	mov	r4, r1
 8007860:	4616      	mov	r6, r2
 8007862:	d505      	bpl.n	8007870 <__swrite+0x1e>
 8007864:	2302      	movs	r3, #2
 8007866:	2200      	movs	r2, #0
 8007868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786c:	f000 f868 	bl	8007940 <_lseek_r>
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	4632      	mov	r2, r6
 8007874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787e:	463b      	mov	r3, r7
 8007880:	4628      	mov	r0, r5
 8007882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007886:	f000 b817 	b.w	80078b8 <_write_r>

0800788a <__sseek>:
 800788a:	b510      	push	{r4, lr}
 800788c:	460c      	mov	r4, r1
 800788e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007892:	f000 f855 	bl	8007940 <_lseek_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	bf15      	itete	ne
 800789c:	6560      	strne	r0, [r4, #84]	; 0x54
 800789e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078a6:	81a3      	strheq	r3, [r4, #12]
 80078a8:	bf18      	it	ne
 80078aa:	81a3      	strhne	r3, [r4, #12]
 80078ac:	bd10      	pop	{r4, pc}

080078ae <__sclose>:
 80078ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b2:	f000 b813 	b.w	80078dc <_close_r>
	...

080078b8 <_write_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4605      	mov	r5, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	2200      	movs	r2, #0
 80078c2:	4c05      	ldr	r4, [pc, #20]	; (80078d8 <_write_r+0x20>)
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f7f9 f88b 	bl	80009e2 <_write>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_write_r+0x1e>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_write_r+0x1e>
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20001f50 	.word	0x20001f50

080078dc <_close_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	2300      	movs	r3, #0
 80078e0:	4c05      	ldr	r4, [pc, #20]	; (80078f8 <_close_r+0x1c>)
 80078e2:	4605      	mov	r5, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	f7f9 f897 	bl	8000a1a <_close>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_close_r+0x1a>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_close_r+0x1a>
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20001f50 	.word	0x20001f50

080078fc <_fstat_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	2300      	movs	r3, #0
 8007900:	4c06      	ldr	r4, [pc, #24]	; (800791c <_fstat_r+0x20>)
 8007902:	4605      	mov	r5, r0
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	f7f9 f891 	bl	8000a30 <_fstat>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d102      	bne.n	8007918 <_fstat_r+0x1c>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	b103      	cbz	r3, 8007918 <_fstat_r+0x1c>
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	20001f50 	.word	0x20001f50

08007920 <_isatty_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	2300      	movs	r3, #0
 8007924:	4c05      	ldr	r4, [pc, #20]	; (800793c <_isatty_r+0x1c>)
 8007926:	4605      	mov	r5, r0
 8007928:	4608      	mov	r0, r1
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	f7f9 f88f 	bl	8000a4e <_isatty>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_isatty_r+0x1a>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	b103      	cbz	r3, 800793a <_isatty_r+0x1a>
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	20001f50 	.word	0x20001f50

08007940 <_lseek_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4605      	mov	r5, r0
 8007944:	4608      	mov	r0, r1
 8007946:	4611      	mov	r1, r2
 8007948:	2200      	movs	r2, #0
 800794a:	4c05      	ldr	r4, [pc, #20]	; (8007960 <_lseek_r+0x20>)
 800794c:	6022      	str	r2, [r4, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f7f9 f887 	bl	8000a62 <_lseek>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_lseek_r+0x1e>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	b103      	cbz	r3, 800795e <_lseek_r+0x1e>
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20001f50 	.word	0x20001f50

08007964 <_read_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4605      	mov	r5, r0
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	2200      	movs	r2, #0
 800796e:	4c05      	ldr	r4, [pc, #20]	; (8007984 <_read_r+0x20>)
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f7f9 f818 	bl	80009a8 <_read>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_read_r+0x1e>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	b103      	cbz	r3, 8007982 <_read_r+0x1e>
 8007980:	602b      	str	r3, [r5, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	20001f50 	.word	0x20001f50

08007988 <_init>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr

08007994 <_fini>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr
